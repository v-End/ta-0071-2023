node {
  name: "load_images/input_producer/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i106_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i107_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i112_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i115_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i127_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i128_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i134_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i137_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i148_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i150_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i151_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i153_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i154_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i157_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i160_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i174_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i176_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i17_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i181_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i183_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i185_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i189_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i195_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i19_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i1_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i203_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i218_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i21_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i22_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i25_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i28_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i40_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i42_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i47_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i49_n3.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i50_n4.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i54_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i5_n1.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i67_n2.png"
        string_val: "gprdata_input/amp/val\\RebarCorrosion_i80_n3.png"
      }
    }
  }
}
node {
  name: "load_images/input_producer/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "load_images/input_producer/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/input_producer/Greater"
  op: "Greater"
  input: "load_images/input_producer/Size"
  input: "load_images/input_producer/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/input_producer/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "load_images/input_producer/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "load_images/input_producer/Assert/Assert"
  op: "Assert"
  input: "load_images/input_producer/Greater"
  input: "load_images/input_producer/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "load_images/input_producer/Identity"
  op: "Identity"
  input: "load_images/input_producer/Const"
  input: "^load_images/input_producer/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "load_images/input_producer"
  op: "FIFOQueueV2"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "load_images/input_producer/input_producer_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "load_images/input_producer"
  input: "load_images/input_producer/Identity"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "load_images/input_producer/input_producer_Close"
  op: "QueueCloseV2"
  input: "load_images/input_producer"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "load_images/input_producer/input_producer_Close_1"
  op: "QueueCloseV2"
  input: "load_images/input_producer"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "load_images/input_producer/input_producer_Size"
  op: "QueueSizeV2"
  input: "load_images/input_producer"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/input_producer/Cast"
  op: "Cast"
  input: "load_images/input_producer/input_producer_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/input_producer/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "load_images/input_producer/mul"
  op: "Mul"
  input: "load_images/input_producer/Cast"
  input: "load_images/input_producer/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/input_producer/fraction_of_32_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "load_images/input_producer/fraction_of_32_full"
      }
    }
  }
}
node {
  name: "load_images/input_producer/fraction_of_32_full"
  op: "ScalarSummary"
  input: "load_images/input_producer/fraction_of_32_full/tags"
  input: "load_images/input_producer/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/WholeFileReaderV2"
  op: "WholeFileReaderV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "load_images/ReaderReadV2"
  op: "ReaderReadV2"
  input: "load_images/WholeFileReaderV2"
  input: "load_images/input_producer"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/DecodePng"
  op: "DecodePng"
  input: "load_images/ReaderReadV2:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "load_images/convert_image/Cast"
  op: "Cast"
  input: "load_images/DecodePng"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "load_images/convert_image/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.003921568859368563
      }
    }
  }
}
node {
  name: "load_images/convert_image"
  op: "Mul"
  input: "load_images/convert_image/Cast"
  input: "load_images/convert_image/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "load_images/Shape"
  op: "Shape"
  input: "load_images/convert_image"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "load_images/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "load_images/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "load_images/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice"
  op: "StridedSlice"
  input: "load_images/Shape"
  input: "load_images/strided_slice/stack"
  input: "load_images/strided_slice/stack_1"
  input: "load_images/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "load_images/assert_equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Equal"
  op: "Equal"
  input: "load_images/strided_slice"
  input: "load_images/assert_equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "load_images/assert_equal_1/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/range"
  op: "Range"
  input: "load_images/assert_equal_1/range/start"
  input: "load_images/assert_equal_1/Rank"
  input: "load_images/assert_equal_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/All"
  op: "All"
  input: "load_images/assert_equal_1/Equal"
  input: "load_images/assert_equal_1/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "image does not have 3 channels"
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (load_images/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (load_images/assert_equal_1/y:0) = "
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "image does not have 3 channels"
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (load_images/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (load_images/assert_equal_1/y:0) = "
      }
    }
  }
}
node {
  name: "load_images/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "load_images/assert_equal_1/All"
  input: "load_images/assert_equal_1/Assert/Assert/data_0"
  input: "load_images/assert_equal_1/Assert/Assert/data_1"
  input: "load_images/assert_equal_1/Assert/Assert/data_2"
  input: "load_images/strided_slice"
  input: "load_images/assert_equal_1/Assert/Assert/data_4"
  input: "load_images/assert_equal_1/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "load_images/Identity"
  op: "Identity"
  input: "load_images/convert_image"
  input: "^load_images/assert_equal_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "load_images/Shape_1"
  op: "Shape"
  input: "load_images/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "load_images/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "load_images/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_1"
  op: "StridedSlice"
  input: "load_images/Shape_1"
  input: "load_images/strided_slice_1/stack"
  input: "load_images/strided_slice_1/stack_1"
  input: "load_images/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "load_images/floordiv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "load_images/floordiv"
  op: "FloorDiv"
  input: "load_images/strided_slice_1"
  input: "load_images/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack"
  op: "Pack"
  input: "load_images/strided_slice_2/stack/0"
  input: "load_images/Const"
  input: "load_images/strided_slice_2/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_1/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_1"
  op: "Pack"
  input: "load_images/strided_slice_2/stack_1/0"
  input: "load_images/floordiv"
  input: "load_images/strided_slice_2/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_2/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_2/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_2/stack_2"
  op: "Pack"
  input: "load_images/strided_slice_2/stack_2/0"
  input: "load_images/Const_1"
  input: "load_images/strided_slice_2/stack_2/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_2"
  op: "StridedSlice"
  input: "load_images/Identity"
  input: "load_images/strided_slice_2/stack"
  input: "load_images/strided_slice_2/stack_1"
  input: "load_images/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/preprocess/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "load_images/preprocess/mul"
  op: "Mul"
  input: "load_images/strided_slice_2"
  input: "load_images/preprocess/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "load_images/preprocess/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "load_images/preprocess/sub"
  op: "Sub"
  input: "load_images/preprocess/mul"
  input: "load_images/preprocess/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "load_images/floordiv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "load_images/floordiv_1"
  op: "FloorDiv"
  input: "load_images/strided_slice_1"
  input: "load_images/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "load_images/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack"
  op: "Pack"
  input: "load_images/strided_slice_3/stack/0"
  input: "load_images/floordiv_1"
  input: "load_images/strided_slice_3/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_1/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_1"
  op: "Pack"
  input: "load_images/strided_slice_3/stack_1/0"
  input: "load_images/Const_2"
  input: "load_images/strided_slice_3/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_2/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_2/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "load_images/strided_slice_3/stack_2"
  op: "Pack"
  input: "load_images/strided_slice_3/stack_2/0"
  input: "load_images/Const_3"
  input: "load_images/strided_slice_3/stack_2/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/strided_slice_3"
  op: "StridedSlice"
  input: "load_images/Identity"
  input: "load_images/strided_slice_3/stack"
  input: "load_images/strided_slice_3/stack_1"
  input: "load_images/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "load_images/preprocess_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "load_images/preprocess_1/mul"
  op: "Mul"
  input: "load_images/strided_slice_3"
  input: "load_images/preprocess_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "load_images/preprocess_1/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "load_images/preprocess_1/sub"
  op: "Sub"
  input: "load_images/preprocess_1/mul"
  input: "load_images/preprocess_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "input_images/resize/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_images/resize/ExpandDims"
  op: "ExpandDims"
  input: "load_images/preprocess/sub"
  input: "input_images/resize/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "input_images/resize/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "input_images/resize/ResizeArea"
  op: "ResizeArea"
  input: "input_images/resize/ExpandDims"
  input: "input_images/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "input_images/resize/Squeeze"
  op: "Squeeze"
  input: "input_images/resize/ResizeArea"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "input_images/random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_images/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "input_images/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 881541115
    }
  }
}
node {
  name: "input_images/Floor"
  op: "Floor"
  input: "input_images/random_uniform/RandomUniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_images/Cast"
  op: "Cast"
  input: "input_images/Floor"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "target_images/resize/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "target_images/resize/ExpandDims"
  op: "ExpandDims"
  input: "load_images/preprocess_1/sub"
  input: "target_images/resize/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "target_images/resize/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "target_images/resize/ResizeArea"
  op: "ResizeArea"
  input: "target_images/resize/ExpandDims"
  input: "target_images/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "target_images/resize/Squeeze"
  op: "Squeeze"
  input: "target_images/resize/ResizeArea"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "target_images/random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "target_images/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "target_images/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 881541115
    }
  }
}
node {
  name: "target_images/Floor"
  op: "Floor"
  input: "target_images/random_uniform/RandomUniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "target_images/Cast"
  op: "Cast"
  input: "target_images/Floor"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "batch/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "batch/fifo_queue"
  op: "FIFOQueueV2"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch/fifo_queue_enqueue"
  op: "QueueEnqueueV2"
  input: "batch/fifo_queue"
  input: "load_images/ReaderReadV2"
  input: "input_images/resize/Squeeze"
  input: "target_images/resize/Squeeze"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "batch/fifo_queue_Close"
  op: "QueueCloseV2"
  input: "batch/fifo_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "batch/fifo_queue_Close_1"
  op: "QueueCloseV2"
  input: "batch/fifo_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "batch/fifo_queue_Size"
  op: "QueueSizeV2"
  input: "batch/fifo_queue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch/Cast"
  op: "Cast"
  input: "batch/fifo_queue_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "batch/mul"
  op: "Mul"
  input: "batch/Cast"
  input: "batch/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch/fraction_of_32_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "batch/fraction_of_32_full"
      }
    }
  }
}
node {
  name: "batch/fraction_of_32_full"
  op: "ScalarSummary"
  input: "batch/fraction_of_32_full/tags"
  input: "batch/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch/n"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "batch"
  op: "QueueDequeueManyV2"
  input: "batch/fifo_queue"
  input: "batch/n"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  input: "generator/encoder_1/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "batch:1"
  input: "generator/encoder_1/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_1/conv2d/Conv2D"
  input: "generator/encoder_1/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul/x"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul_1/x"
  input: "generator/encoder_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_2/lrelu/mul"
  input: "generator/encoder_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  input: "generator/encoder_2/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_2/lrelu/add"
  input: "generator/encoder_2/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_2/conv2d/Conv2D"
  input: "generator/encoder_2/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "generator/encoder_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "generator/encoder_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "generator/encoder_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_2/conv2d/BiasAdd"
  input: "generator/encoder_2/batch_normalization/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "^generator/encoder_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "^generator/encoder_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul/x"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul_1/x"
  input: "generator/encoder_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_3/lrelu/mul"
  input: "generator/encoder_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  input: "generator/encoder_3/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_3/lrelu/add"
  input: "generator/encoder_3/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_3/conv2d/Conv2D"
  input: "generator/encoder_3/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "generator/encoder_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "generator/encoder_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "generator/encoder_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_3/conv2d/BiasAdd"
  input: "generator/encoder_3/batch_normalization/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "^generator/encoder_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "^generator/encoder_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul/x"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul_1/x"
  input: "generator/encoder_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_4/lrelu/mul"
  input: "generator/encoder_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  input: "generator/encoder_4/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_4/lrelu/add"
  input: "generator/encoder_4/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_4/conv2d/Conv2D"
  input: "generator/encoder_4/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "generator/encoder_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "generator/encoder_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "generator/encoder_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_4/conv2d/BiasAdd"
  input: "generator/encoder_4/batch_normalization/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "^generator/encoder_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "^generator/encoder_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul/x"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul_1/x"
  input: "generator/encoder_5/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_5/lrelu/mul"
  input: "generator/encoder_5/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  input: "generator/encoder_5/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_5/lrelu/add"
  input: "generator/encoder_5/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_5/conv2d/Conv2D"
  input: "generator/encoder_5/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "generator/encoder_5/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "generator/encoder_5/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "generator/encoder_5/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_5/conv2d/BiasAdd"
  input: "generator/encoder_5/batch_normalization/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_5/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "^generator/encoder_5/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_5/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "^generator/encoder_5/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul/x"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul_1/x"
  input: "generator/encoder_6/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_6/lrelu/mul"
  input: "generator/encoder_6/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  input: "generator/encoder_6/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_6/lrelu/add"
  input: "generator/encoder_6/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_6/conv2d/Conv2D"
  input: "generator/encoder_6/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 10
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "generator/encoder_6/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "generator/encoder_6/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "generator/encoder_6/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_6/conv2d/BiasAdd"
  input: "generator/encoder_6/batch_normalization/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_6/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "^generator/encoder_6/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_6/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "^generator/encoder_6/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul/x"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul_1/x"
  input: "generator/encoder_7/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_7/lrelu/mul"
  input: "generator/encoder_7/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 11
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  input: "generator/encoder_7/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_7/lrelu/add"
  input: "generator/encoder_7/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_7/conv2d/Conv2D"
  input: "generator/encoder_7/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 12
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "generator/encoder_7/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "generator/encoder_7/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "generator/encoder_7/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_7/conv2d/BiasAdd"
  input: "generator/encoder_7/batch_normalization/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_7/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "^generator/encoder_7/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_7/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "^generator/encoder_7/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul/x"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul_1/x"
  input: "generator/encoder_8/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/add"
  op: "AddV2"
  input: "generator/encoder_8/lrelu/mul"
  input: "generator/encoder_8/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 13
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/kernel"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/bias"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  input: "generator/encoder_8/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_8/lrelu/add"
  input: "generator/encoder_8/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_8/conv2d/Conv2D"
  input: "generator/encoder_8/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 14
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "generator/encoder_8/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "generator/encoder_8/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "generator/encoder_8/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/encoder_8/conv2d/BiasAdd"
  input: "generator/encoder_8/batch_normalization/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/ReadVariableOp_1"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_8/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "^generator/encoder_8/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_8/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "^generator/encoder_8/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/Relu"
  op: "Relu"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 15
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "generator/decoder_8/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_8/conv2d_transpose/Shape"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice"
  input: "generator/decoder_8/conv2d_transpose/stack/1"
  input: "generator/decoder_8/conv2d_transpose/stack/2"
  input: "generator/decoder_8/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_8/conv2d_transpose/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_8/conv2d_transpose/stack"
  input: "generator/decoder_8/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_8/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_8/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 16
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "generator/decoder_8/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "generator/decoder_8/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "generator/decoder_8/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_8/conv2d_transpose/BiasAdd"
  input: "generator/decoder_8/batch_normalization/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_8/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "^generator/decoder_8/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_8/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "^generator/decoder_8/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_8/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_8/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 17
    }
  }
}
node {
  name: "generator/decoder_8/dropout/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "generator/decoder_8/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_8/dropout/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Cast"
  op: "Cast"
  input: "generator/decoder_8/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Mul_1"
  op: "Mul"
  input: "generator/decoder_8/dropout/Mul"
  input: "generator/decoder_8/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_7/concat"
  op: "ConcatV2"
  input: "generator/decoder_8/dropout/Mul_1"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_7/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/Relu"
  op: "Relu"
  input: "generator/decoder_7/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 18
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "generator/decoder_7/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_7/conv2d_transpose/Shape"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice"
  input: "generator/decoder_7/conv2d_transpose/stack/1"
  input: "generator/decoder_7/conv2d_transpose/stack/2"
  input: "generator/decoder_7/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_7/conv2d_transpose/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_7/conv2d_transpose/stack"
  input: "generator/decoder_7/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_7/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_7/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 19
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "generator/decoder_7/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "generator/decoder_7/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "generator/decoder_7/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_7/conv2d_transpose/BiasAdd"
  input: "generator/decoder_7/batch_normalization/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_7/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "^generator/decoder_7/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_7/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "^generator/decoder_7/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_7/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_7/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 20
    }
  }
}
node {
  name: "generator/decoder_7/dropout/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "generator/decoder_7/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_7/dropout/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Cast"
  op: "Cast"
  input: "generator/decoder_7/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Mul_1"
  op: "Mul"
  input: "generator/decoder_7/dropout/Mul"
  input: "generator/decoder_7/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_6/concat"
  op: "ConcatV2"
  input: "generator/decoder_7/dropout/Mul_1"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_6/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/Relu"
  op: "Relu"
  input: "generator/decoder_6/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 21
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "generator/decoder_6/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_6/conv2d_transpose/Shape"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice"
  input: "generator/decoder_6/conv2d_transpose/stack/1"
  input: "generator/decoder_6/conv2d_transpose/stack/2"
  input: "generator/decoder_6/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_6/conv2d_transpose/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_6/conv2d_transpose/stack"
  input: "generator/decoder_6/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_6/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_6/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 22
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "generator/decoder_6/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "generator/decoder_6/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "generator/decoder_6/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_6/conv2d_transpose/BiasAdd"
  input: "generator/decoder_6/batch_normalization/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_6/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "^generator/decoder_6/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_6/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "^generator/decoder_6/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_6/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_6/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 23
    }
  }
}
node {
  name: "generator/decoder_6/dropout/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "generator/decoder_6/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_6/dropout/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Cast"
  op: "Cast"
  input: "generator/decoder_6/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Mul_1"
  op: "Mul"
  input: "generator/decoder_6/dropout/Mul"
  input: "generator/decoder_6/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_5/concat"
  op: "ConcatV2"
  input: "generator/decoder_6/dropout/Mul_1"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_5/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/Relu"
  op: "Relu"
  input: "generator/decoder_5/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 24
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "generator/decoder_5/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_5/conv2d_transpose/Shape"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice"
  input: "generator/decoder_5/conv2d_transpose/stack/1"
  input: "generator/decoder_5/conv2d_transpose/stack/2"
  input: "generator/decoder_5/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_5/conv2d_transpose/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_5/conv2d_transpose/stack"
  input: "generator/decoder_5/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_5/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_5/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 25
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "generator/decoder_5/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "generator/decoder_5/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "generator/decoder_5/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_5/conv2d_transpose/BiasAdd"
  input: "generator/decoder_5/batch_normalization/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_5/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "^generator/decoder_5/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_5/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "^generator/decoder_5/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_4/concat"
  op: "ConcatV2"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/Relu"
  op: "Relu"
  input: "generator/decoder_4/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 26
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "generator/decoder_4/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000\020\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_4/conv2d_transpose/Shape"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice"
  input: "generator/decoder_4/conv2d_transpose/stack/1"
  input: "generator/decoder_4/conv2d_transpose/stack/2"
  input: "generator/decoder_4/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_4/conv2d_transpose/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_4/conv2d_transpose/stack"
  input: "generator/decoder_4/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_4/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_4/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 27
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "generator/decoder_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "generator/decoder_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "generator/decoder_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_4/conv2d_transpose/BiasAdd"
  input: "generator/decoder_4/batch_normalization/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "^generator/decoder_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "^generator/decoder_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_3/concat"
  op: "ConcatV2"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/Relu"
  op: "Relu"
  input: "generator/decoder_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 28
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "generator/decoder_3/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_3/conv2d_transpose/Shape"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice"
  input: "generator/decoder_3/conv2d_transpose/stack/1"
  input: "generator/decoder_3/conv2d_transpose/stack/2"
  input: "generator/decoder_3/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_3/conv2d_transpose/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_3/conv2d_transpose/stack"
  input: "generator/decoder_3/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_3/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_3/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 29
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "generator/decoder_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "generator/decoder_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "generator/decoder_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_3/conv2d_transpose/BiasAdd"
  input: "generator/decoder_3/batch_normalization/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "^generator/decoder_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "^generator/decoder_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_2/concat"
  op: "ConcatV2"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3"
  input: "generator/decoder_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/Relu"
  op: "Relu"
  input: "generator/decoder_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 30
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "generator/decoder_2/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_2/conv2d_transpose/Shape"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice"
  input: "generator/decoder_2/conv2d_transpose/stack/1"
  input: "generator/decoder_2/conv2d_transpose/stack/2"
  input: "generator/decoder_2/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_2/conv2d_transpose/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_2/conv2d_transpose/stack"
  input: "generator/decoder_2/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_2/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_2/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 31
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/gamma"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/beta"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "generator/decoder_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "generator/decoder_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "generator/decoder_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "generator/decoder_2/conv2d_transpose/BiasAdd"
  input: "generator/decoder_2/batch_normalization/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/ReadVariableOp_1"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "^generator/decoder_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "^generator/decoder_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_1/concat"
  op: "ConcatV2"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3"
  input: "generator/encoder_1/conv2d/BiasAdd"
  input: "generator/decoder_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/Relu"
  op: "Relu"
  input: "generator/decoder_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/kernel"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/bias"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "generator/decoder_1/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_1/conv2d_transpose/Shape"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice"
  input: "generator/decoder_1/conv2d_transpose/stack/1"
  input: "generator/decoder_1/conv2d_transpose/stack/2"
  input: "generator/decoder_1/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_1/conv2d_transpose/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_1/conv2d_transpose/stack"
  input: "generator/decoder_1/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_1/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_1/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_1/Tanh"
  op: "Tanh"
  input: "generator/decoder_1/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/concat"
  op: "ConcatV2"
  input: "batch:1"
  input: "batch:2"
  input: "real_discriminator/discriminator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/concat"
  input: "real_discriminator/discriminator/layer_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\006\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 33
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 6
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/kernel"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/bias"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  input: "discriminator/layer_1/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "real_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_1/conv2d/Conv2D"
  input: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/add"
  op: "AddV2"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_1/lrelu/add"
  input: "real_discriminator/discriminator/layer_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 34
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/kernel"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/bias"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  input: "discriminator/layer_2/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "real_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_2/conv2d/Conv2D"
  input: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 35
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/gamma"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/beta"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "discriminator/layer_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "discriminator/layer_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "discriminator/layer_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp_1"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "^real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "^real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/add"
  op: "AddV2"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_2/lrelu/add"
  input: "real_discriminator/discriminator/layer_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 36
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/kernel"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/bias"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  input: "discriminator/layer_3/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "real_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_3/conv2d/Conv2D"
  input: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 37
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/gamma"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/beta"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "discriminator/layer_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "discriminator/layer_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "discriminator/layer_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp_1"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "^real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "^real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/add"
  op: "AddV2"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_3/lrelu/add"
  input: "real_discriminator/discriminator/layer_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 38
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/kernel"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/bias"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  input: "discriminator/layer_4/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "real_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_4/conv2d/Conv2D"
  input: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/gamma"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/beta"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "discriminator/layer_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "discriminator/layer_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "discriminator/layer_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp_1"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "^real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "^real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/add"
  op: "AddV2"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_4/lrelu/add"
  input: "real_discriminator/discriminator/layer_5/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 2122079
    }
  }
  attr {
    key: "seed2"
    value {
      i: 40
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/kernel"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/bias"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  input: "discriminator/layer_5/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "real_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_5/conv2d/Conv2D"
  input: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Sigmoid"
  op: "Sigmoid"
  input: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/concat"
  op: "ConcatV2"
  input: "batch:1"
  input: "generator/decoder_1/Tanh"
  input: "fake_discriminator/discriminator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/concat"
  input: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D"
  input: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/add"
  op: "AddV2"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_1/lrelu/add"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp_1"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "^fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "^fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/add"
  op: "AddV2"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_2/lrelu/add"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp_1"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "^fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "^fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/add"
  op: "AddV2"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_3/lrelu/add"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp_1"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "^fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "^fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/add"
  op: "AddV2"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_4/lrelu/add"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D"
  input: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Sigmoid"
  op: "Sigmoid"
  input: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "discriminator_loss/add"
  op: "AddV2"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Log"
  op: "Log"
  input: "discriminator_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_loss/sub"
  op: "Sub"
  input: "discriminator_loss/sub/x"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "discriminator_loss/add_1"
  op: "AddV2"
  input: "discriminator_loss/sub"
  input: "discriminator_loss/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Log_1"
  op: "Log"
  input: "discriminator_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add_2"
  op: "AddV2"
  input: "discriminator_loss/Log"
  input: "discriminator_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Neg"
  op: "Neg"
  input: "discriminator_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_loss/Mean"
  op: "Mean"
  input: "discriminator_loss/Neg"
  input: "discriminator_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "generator_loss/add"
  op: "AddV2"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "generator_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Log"
  op: "Log"
  input: "generator_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Neg"
  op: "Neg"
  input: "generator_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_loss/Mean"
  op: "Mean"
  input: "generator_loss/Neg"
  input: "generator_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/sub"
  op: "Sub"
  input: "batch:2"
  input: "generator/decoder_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Abs"
  op: "Abs"
  input: "generator_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1"
  op: "Mean"
  input: "generator_loss/Abs"
  input: "generator_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_loss/mul"
  op: "Mul"
  input: "generator_loss/Mean"
  input: "generator_loss/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 100.0
      }
    }
  }
}
node {
  name: "generator_loss/mul_1"
  op: "Mul"
  input: "generator_loss/Mean_1"
  input: "generator_loss/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/add_1"
  op: "AddV2"
  input: "generator_loss/mul"
  input: "generator_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/grad_ys_0"
  op: "Fill"
  input: "discriminator_train/gradients/Shape"
  input: "discriminator_train/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/grad_ys_0"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000\036\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Tile"
  op: "Tile"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 900.0
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Tile"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  op: "Neg"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "discriminator_loss/add"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "discriminator_loss/add_1"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000\036\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs/s0"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000\036\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs/s0_1"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
  op: "Neg"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "real_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "real_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_5/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\037\000\000\000\037\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\037\000\000\000\037\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\037\000\000\000\037\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_1"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_2"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_2"
  input: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_3"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_3"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "real_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "real_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_4/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_4"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_5"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_6"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_7"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_8"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_8"
  input: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_9"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_9"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "real_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "real_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_3/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_10"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_11"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_12"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_13"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_14"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_24"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_14"
  input: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_15"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_25"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_26"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_27"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_28"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_29"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "discriminator_train/gradients/AddN_15"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "real_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "real_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_2/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_16"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_17"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_18"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_19"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_20"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/AddN_20"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/AddN_20"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_21"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "real_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "real_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/AddN_21"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/AddN_21"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN:1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_22"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_23"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "discriminator_train/beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator_train/beta1_power"
    }
  }
}
node {
  name: "discriminator_train/beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/beta1_power/Assign"
  op: "AssignVariableOp"
  input: "discriminator_train/beta1_power"
  input: "discriminator_train/beta1_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "discriminator_train/beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator_train/beta2_power"
    }
  }
}
node {
  name: "discriminator_train/beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/beta2_power/Assign"
  op: "AssignVariableOp"
  input: "discriminator_train/beta2_power"
  input: "discriminator_train/beta2_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\006\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 6
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\006\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 6
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/bias/Adam"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "discriminator/layer_1/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_1/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "discriminator/layer_1/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/bias/Adam"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "discriminator/layer_2/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "discriminator/layer_2/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "discriminator/layer_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_2/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/bias/Adam"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "discriminator/layer_3/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "discriminator/layer_3/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "discriminator/layer_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_3/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/bias/Adam"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "discriminator/layer_4/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "discriminator/layer_4/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "discriminator/layer_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_4/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/bias/Adam"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "discriminator/layer_5/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator/layer_5/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "discriminator/layer_5/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00019999999494757503
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_1/conv2d/bias"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_2/conv2d/bias"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_3/conv2d/bias"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_4/conv2d/bias"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "discriminator/layer_5/conv2d/bias"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/mul"
  op: "Mul"
  input: "discriminator_train/Adam/ReadVariableOp"
  input: "discriminator_train/Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "discriminator_train/beta1_power"
  input: "discriminator_train/Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_train/beta1_power"
  input: "^discriminator_train/Adam/AssignVariableOp"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam/mul_1"
  op: "Mul"
  input: "discriminator_train/Adam/ReadVariableOp_2"
  input: "discriminator_train/Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "discriminator_train/beta2_power"
  input: "discriminator_train/Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "discriminator_train/beta2_power"
  input: "^discriminator_train/Adam/AssignVariableOp_1"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_train/Adam"
  op: "NoOp"
  input: "^discriminator_train/Adam/AssignVariableOp"
  input: "^discriminator_train/Adam/AssignVariableOp_1"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ResourceApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ResourceApplyAdam"
}
node {
  name: "generator_train/gradients/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/grad_ys_0/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_train/gradients/grad_ys_0"
  op: "Fill"
  input: "generator_train/gradients/Shape"
  input: "generator_train/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/grad_ys_0"
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/grad_ys_0"
  input: "^generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/grad_ys_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/grad_ys_0"
  input: "^generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/grad_ys_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  input: "generator_loss/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  input: "generator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/mul_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  input: "generator_loss/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  input: "generator_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_1_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000\036\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Tile"
  op: "Tile"
  input: "generator_train/gradients/generator_loss/Mean_grad/Reshape"
  input: "generator_train/gradients/generator_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Const_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 900.0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "generator_train/gradients/generator_loss/Mean_grad/Tile"
  input: "generator_train/gradients/generator_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Const_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 196608.0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Tile"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Neg_grad/Neg"
  op: "Neg"
  input: "generator_train/gradients/generator_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Abs_grad/Sign"
  op: "Sign"
  input: "generator_loss/sub"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/truediv"
  input: "generator_train/gradients/generator_loss/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "generator_loss/add"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/Neg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Log_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/Neg_grad/Neg"
  input: "generator_train/gradients/generator_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Neg"
  op: "Neg"
  input: "generator_train/gradients/generator_loss/Abs_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/Abs_grad/mul"
  input: "^generator_train/gradients/generator_loss/sub_grad/Neg"
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/Abs_grad/mul"
  input: "^generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/Abs_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/sub_grad/Neg"
  input: "^generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator_loss/Log_grad/mul"
  input: "generator_train/gradients/generator_loss/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/add_grad/Sum"
  input: "generator_train/gradients/generator_loss/add_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/Log_grad/mul"
  input: "^generator_train/gradients/generator_loss/add_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/Log_grad/mul"
  input: "^generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/add_grad/Reshape"
  input: "^generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\037\000\000\000\037\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_1"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_1"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_2"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_2"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/ReadVariableOp"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:3"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:4"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_3"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/AddN_3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/AddN_3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\000\001\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/mod"
  op: "FloorMod"
  input: "fake_discriminator/discriminator/concat/axis"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/mod"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_4"
  op: "AddN"
  input: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "generator/decoder_1/Tanh"
  input: "generator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_1/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_1/concat/axis"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency"
  input: "generator/decoder_2/conv2d_transpose/BiasAdd"
  input: "generator/decoder_2/batch_normalization/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_2/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_2/concat/axis"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_24"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency"
  input: "generator/decoder_3/conv2d_transpose/BiasAdd"
  input: "generator/decoder_3/batch_normalization/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_3/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_3/concat/axis"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000 \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_25"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_26"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_27"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_28"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_29"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency"
  input: "generator/decoder_4/conv2d_transpose/BiasAdd"
  input: "generator/decoder_4/batch_normalization/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_4/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_4/concat/axis"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000\020\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000\020\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_30"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_31"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_32"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_33"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_34"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency"
  input: "generator/decoder_5/conv2d_transpose/BiasAdd"
  input: "generator/decoder_5/batch_normalization/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_5/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_5/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_5/concat/axis"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  input: "generator/decoder_6/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  input: "generator/decoder_6/dropout/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/BroadcastGradientArgs/s0"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/control_dependency"
  input: "generator/decoder_6/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_35"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_36"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_37"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_38"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_39"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_6/dropout/Mul_grad/tuple/control_dependency"
  input: "generator/decoder_6/conv2d_transpose/BiasAdd"
  input: "generator/decoder_6/batch_normalization/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_6/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_6/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_6/concat/axis"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  input: "generator/decoder_7/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  input: "generator/decoder_7/dropout/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/BroadcastGradientArgs/s0"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/control_dependency"
  input: "generator/decoder_7/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_40"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_41"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_42"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_43"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_44"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_7/dropout/Mul_grad/tuple/control_dependency"
  input: "generator/decoder_7/conv2d_transpose/BiasAdd"
  input: "generator/decoder_7/batch_normalization/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_7/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_7/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_7/concat/axis"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Shape"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  input: "generator/decoder_8/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  input: "generator/decoder_8/dropout/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/BroadcastGradientArgs/s0"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/control_dependency"
  input: "generator/decoder_8/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_45"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_46"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_47"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_48"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_49"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_8/dropout/Mul_grad/tuple/control_dependency"
  input: "generator/decoder_8/conv2d_transpose/BiasAdd"
  input: "generator/decoder_8/batch_normalization/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:3"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:4"
  input: "generator/decoder_8/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_8/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_50"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_51"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_52"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_53"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_54"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/generator/decoder_8/Relu_grad/ReluGrad"
  input: "generator/encoder_8/conv2d/BiasAdd"
  input: "generator/encoder_8/batch_normalization/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_8/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_8/lrelu/add"
  input: "generator/encoder_8/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_8/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_8/lrelu/add"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_8/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_8/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_5"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_6"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_55"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_56"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_57"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_58"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_59"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_6"
  input: "generator/encoder_7/conv2d/BiasAdd"
  input: "generator/encoder_7/batch_normalization/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_7/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_7/lrelu/add"
  input: "generator/encoder_7/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_7/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_7/lrelu/add"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_7/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_7/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_7"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_8"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_60"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_61"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_62"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_63"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_64"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_8"
  input: "generator/encoder_6/conv2d/BiasAdd"
  input: "generator/encoder_6/batch_normalization/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_6/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_6/lrelu/add"
  input: "generator/encoder_6/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_6/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_6/lrelu/add"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\010\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_6/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_6/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_9"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_10"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_65"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_66"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_67"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_68"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_69"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_10"
  input: "generator/encoder_5/conv2d/BiasAdd"
  input: "generator/encoder_5/batch_normalization/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_5/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_5/lrelu/add"
  input: "generator/encoder_5/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_5/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_5/lrelu/add"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000\020\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs/s0_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_5/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_5/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_11"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_12"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_70"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_71"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_72"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_73"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_74"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_12"
  input: "generator/encoder_4/conv2d/BiasAdd"
  input: "generator/encoder_4/batch_normalization/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_4/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_4/lrelu/add"
  input: "generator/encoder_4/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_4/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_4/lrelu/add"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_13"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_14"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_75"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_76"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_77"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_78"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_79"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_14"
  input: "generator/encoder_3/conv2d/BiasAdd"
  input: "generator/encoder_3/batch_normalization/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_3/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_3/lrelu/add"
  input: "generator/encoder_3/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_3/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_3/lrelu/add"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_15"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_16"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_80"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_81"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_82"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_83"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_84"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:5"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  op: "FusedBatchNormGradV3"
  input: "generator_train/gradients/AddN_16"
  input: "generator/encoder_2/conv2d/BiasAdd"
  input: "generator/encoder_2/batch_normalization/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:3"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:4"
  input: "generator/encoder_2/batch_normalization/FusedBatchNormV3:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:1"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3:2"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/FusedBatchNormGradV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_2/lrelu/add"
  input: "generator/encoder_2/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_2/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_2/lrelu/add"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape/shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_17"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_18"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/AddN_18"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/AddN_18"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "batch:1"
  input: "generator/encoder_1/conv2d/Conv2D/ReadVariableOp"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_1/conv2d/Conv2D/ReadVariableOp"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "batch:1"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/ShapeN:1"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator_train/beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator_train/beta1_power"
    }
  }
}
node {
  name: "generator_train/beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/beta1_power/Assign"
  op: "AssignVariableOp"
  input: "generator_train/beta1_power"
  input: "generator_train/beta1_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "generator_train/beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator_train/beta2_power"
    }
  }
}
node {
  name: "generator_train/beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/beta2_power/Assign"
  op: "AssignVariableOp"
  input: "generator_train/beta2_power"
  input: "generator_train/beta2_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "generator/encoder_1/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_1/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "generator/encoder_1/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "generator/encoder_2/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "generator/encoder_2/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "generator/encoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "generator/encoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_2/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "generator/encoder_3/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "generator/encoder_3/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "generator/encoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "generator/encoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_3/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "generator/encoder_4/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "generator/encoder_4/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "generator/encoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "generator/encoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_4/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "generator/encoder_5/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "generator/encoder_5/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "generator/encoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "generator/encoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_5/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "generator/encoder_6/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "generator/encoder_6/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "generator/encoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "generator/encoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_6/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "generator/encoder_7/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "generator/encoder_7/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "generator/encoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "generator/encoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_7/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/kernel/Adam"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/bias/Adam"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "generator/encoder_8/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/conv2d/bias/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "generator/encoder_8/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "generator/encoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "generator/encoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/encoder_8/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "generator/decoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "generator/decoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_8/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "generator/decoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "generator/decoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_7/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "generator/decoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "generator/decoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_6/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "generator/decoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "generator/decoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_5/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "generator/decoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "generator/decoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_4/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "generator/decoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "generator/decoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_3/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/gamma/Adam"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "generator/decoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/gamma/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/beta/Adam"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "generator/decoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_2/batch_normalization/beta/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/kernel/Adam"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/bias/Adam"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/learning_rate"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00019999999494757503
      }
    }
  }
}
node {
  name: "generator_train/Adam/beta1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator_train/Adam/beta2"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "generator_train/Adam/epsilon"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_1/conv2d/kernel"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_1/conv2d/bias"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_2/conv2d/kernel"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_2/conv2d/bias"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_3/conv2d/kernel"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_3/conv2d/bias"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_4/conv2d/kernel"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_4/conv2d/bias"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_5/conv2d/kernel"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_5/conv2d/bias"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_6/conv2d/kernel"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_6/conv2d/bias"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_7/conv2d/kernel"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_7/conv2d/bias"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_8/conv2d/kernel"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_8/conv2d/bias"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp"
  input: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/mul"
  op: "Mul"
  input: "generator_train/Adam/ReadVariableOp"
  input: "generator_train/Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "generator_train/beta1_power"
  input: "generator_train/Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_train/beta1_power"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/AssignVariableOp"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam/mul_1"
  op: "Mul"
  input: "generator_train/Adam/ReadVariableOp_2"
  input: "generator_train/Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "generator_train/beta2_power"
  input: "generator_train/Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "generator_train/beta2_power"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/AssignVariableOp_1"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_train/Adam"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/AssignVariableOp"
  input: "^generator_train/Adam/AssignVariableOp_1"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ResourceApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ResourceApplyAdam"
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "discriminator_loss/Mean/ExponentialMovingAverage"
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/Assign"
  op: "AssignVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "discriminator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator_loss/Mean/ExponentialMovingAverage"
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/Assign"
  op: "AssignVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "generator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "generator_loss/Mean_1/ExponentialMovingAverage"
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/Assign"
  op: "AssignVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "generator_loss/Mean_1/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/ReadVariableOp"
  input: "discriminator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "^ExponentialMovingAverage/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/ReadVariableOp"
  input: "generator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/ReadVariableOp"
  input: "generator_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2/AssignSubVariableOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg/AssignSubVariableOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1/AssignSubVariableOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2/AssignSubVariableOp"
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "add"
  op: "AddV2"
  input: "ReadVariableOp"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "AssignVariableOp"
  op: "AssignVariableOp"
  input: "global_step"
  input: "add"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^AssignVariableOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^AssignVariableOp"
  input: "^ExponentialMovingAverage"
  input: "^generator_train/Adam"
}
node {
  name: "deprocess/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "deprocess/add"
  op: "AddV2"
  input: "batch:1"
  input: "deprocess/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "deprocess/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "deprocess/truediv"
  op: "RealDiv"
  input: "deprocess/add"
  input: "deprocess/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "deprocess_1/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "deprocess_1/add"
  op: "AddV2"
  input: "batch:2"
  input: "deprocess_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "deprocess_1/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "deprocess_1/truediv"
  op: "RealDiv"
  input: "deprocess_1/add"
  input: "deprocess_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "deprocess_2/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "deprocess_2/add"
  op: "AddV2"
  input: "generator/decoder_1/Tanh"
  input: "deprocess_2/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "deprocess_2/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "deprocess_2/truediv"
  op: "RealDiv"
  input: "deprocess_2/add"
  input: "deprocess_2/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/Mul"
  op: "Mul"
  input: "deprocess/truediv"
  input: "convert_inputs/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/Maximum"
  op: "Maximum"
  input: "convert_inputs/convert_image/Mul"
  input: "convert_inputs/convert_image/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image/Minimum"
  op: "Minimum"
  input: "convert_inputs/convert_image/Maximum"
  input: "convert_inputs/convert_image/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_inputs/convert_image"
  op: "Cast"
  input: "convert_inputs/convert_image/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/Mul"
  op: "Mul"
  input: "deprocess_1/truediv"
  input: "convert_targets/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/Maximum"
  op: "Maximum"
  input: "convert_targets/convert_image/Mul"
  input: "convert_targets/convert_image/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_targets/convert_image/Minimum"
  op: "Minimum"
  input: "convert_targets/convert_image/Maximum"
  input: "convert_targets/convert_image/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_targets/convert_image"
  op: "Cast"
  input: "convert_targets/convert_image/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/Mul"
  op: "Mul"
  input: "deprocess_2/truediv"
  input: "convert_outputs/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/Maximum"
  op: "Maximum"
  input: "convert_outputs/convert_image/Mul"
  input: "convert_outputs/convert_image/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image/Minimum"
  op: "Minimum"
  input: "convert_outputs/convert_image/Maximum"
  input: "convert_outputs/convert_image/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "convert_outputs/convert_image"
  op: "Cast"
  input: "convert_outputs/convert_image/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2"
  op: "TensorListReserve"
  input: "encode_images/input_pngs/TensorArrayV2/element_shape"
  input: "encode_images/input_pngs/TensorArrayV2/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/TensorListFromTensor"
  op: "TensorListFromTensor"
  input: "convert_inputs/convert_image"
  input: "encode_images/input_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2_1/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2_1/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2_1"
  op: "TensorListReserve"
  input: "encode_images/input_pngs/TensorArrayV2_1/element_shape"
  input: "encode_images/input_pngs/TensorArrayV2_1/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_STRING
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/loop_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while"
  op: "StatelessWhile"
  input: "encode_images/input_pngs/while/loop_counter"
  input: "encode_images/input_pngs/while/maximum_iterations"
  input: "encode_images/input_pngs/Const"
  input: "encode_images/input_pngs/TensorArrayV2_1"
  input: "encode_images/input_pngs/TensorArrayUnstack/TensorListFromTensor"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_num_original_outputs"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "_stateful_parallelism"
    value {
      b: false
    }
  }
  attr {
    key: "body"
    value {
      func {
        name: "encode_images_input_pngs_while_body_3997"
      }
    }
  }
  attr {
    key: "cond"
    value {
      func {
        name: "encode_images_input_pngs_while_cond_3996"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/input_pngs/while"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/input_pngs/while:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity_2"
  op: "Identity"
  input: "encode_images/input_pngs/while:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity_3"
  op: "Identity"
  input: "encode_images/input_pngs/while:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity_4"
  op: "Identity"
  input: "encode_images/input_pngs/while:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2Stack/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayV2Stack/TensorListStack"
  op: "TensorListStack"
  input: "encode_images/input_pngs/while/Identity_3"
  input: "encode_images/input_pngs/TensorArrayV2Stack/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "num_elements"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2"
  op: "TensorListReserve"
  input: "encode_images/target_pngs/TensorArrayV2/element_shape"
  input: "encode_images/target_pngs/TensorArrayV2/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/TensorListFromTensor"
  op: "TensorListFromTensor"
  input: "convert_targets/convert_image"
  input: "encode_images/target_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2_1/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2_1/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2_1"
  op: "TensorListReserve"
  input: "encode_images/target_pngs/TensorArrayV2_1/element_shape"
  input: "encode_images/target_pngs/TensorArrayV2_1/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_STRING
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/loop_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while"
  op: "StatelessWhile"
  input: "encode_images/target_pngs/while/loop_counter"
  input: "encode_images/target_pngs/while/maximum_iterations"
  input: "encode_images/target_pngs/Const"
  input: "encode_images/target_pngs/TensorArrayV2_1"
  input: "encode_images/target_pngs/TensorArrayUnstack/TensorListFromTensor"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_num_original_outputs"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "_stateful_parallelism"
    value {
      b: false
    }
  }
  attr {
    key: "body"
    value {
      func {
        name: "encode_images_target_pngs_while_body_4046"
      }
    }
  }
  attr {
    key: "cond"
    value {
      func {
        name: "encode_images_target_pngs_while_cond_4045"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/target_pngs/while"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/target_pngs/while:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity_2"
  op: "Identity"
  input: "encode_images/target_pngs/while:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity_3"
  op: "Identity"
  input: "encode_images/target_pngs/while:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity_4"
  op: "Identity"
  input: "encode_images/target_pngs/while:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2Stack/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayV2Stack/TensorListStack"
  op: "TensorListStack"
  input: "encode_images/target_pngs/while/Identity_3"
  input: "encode_images/target_pngs/TensorArrayV2Stack/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "num_elements"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2"
  op: "TensorListReserve"
  input: "encode_images/output_pngs/TensorArrayV2/element_shape"
  input: "encode_images/output_pngs/TensorArrayV2/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/TensorListFromTensor"
  op: "TensorListFromTensor"
  input: "convert_outputs/convert_image"
  input: "encode_images/output_pngs/TensorArrayUnstack/TensorListFromTensor/element_shape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_UINT8
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2_1/element_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2_1/num_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2_1"
  op: "TensorListReserve"
  input: "encode_images/output_pngs/TensorArrayV2_1/element_shape"
  input: "encode_images/output_pngs/TensorArrayV2_1/num_elements"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_STRING
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/loop_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while"
  op: "StatelessWhile"
  input: "encode_images/output_pngs/while/loop_counter"
  input: "encode_images/output_pngs/while/maximum_iterations"
  input: "encode_images/output_pngs/Const"
  input: "encode_images/output_pngs/TensorArrayV2_1"
  input: "encode_images/output_pngs/TensorArrayUnstack/TensorListFromTensor"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_num_original_outputs"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "_stateful_parallelism"
    value {
      b: false
    }
  }
  attr {
    key: "body"
    value {
      func {
        name: "encode_images_output_pngs_while_body_4095"
      }
    }
  }
  attr {
    key: "cond"
    value {
      func {
        name: "encode_images_output_pngs_while_cond_4094"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/output_pngs/while"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/output_pngs/while:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity_2"
  op: "Identity"
  input: "encode_images/output_pngs/while:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity_3"
  op: "Identity"
  input: "encode_images/output_pngs/while:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity_4"
  op: "Identity"
  input: "encode_images/output_pngs/while:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2Stack/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayV2Stack/TensorListStack"
  op: "TensorListStack"
  input: "encode_images/output_pngs/while/Identity_3"
  input: "encode_images/output_pngs/TensorArrayV2Stack/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "element_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "num_elements"
    value {
      i: 1
    }
  }
}
node {
  name: "inputs_summary/inputs/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inputs_summary/inputs"
      }
    }
  }
}
node {
  name: "inputs_summary/inputs"
  op: "ImageSummary"
  input: "inputs_summary/inputs/tag"
  input: "convert_inputs/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "targets_summary/targets/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "targets_summary/targets"
      }
    }
  }
}
node {
  name: "targets_summary/targets"
  op: "ImageSummary"
  input: "targets_summary/targets/tag"
  input: "convert_targets/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "outputs_summary/outputs/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "outputs_summary/outputs"
      }
    }
  }
}
node {
  name: "outputs_summary/outputs"
  op: "ImageSummary"
  input: "outputs_summary/outputs/tag"
  input: "convert_outputs/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "predict_real_summary/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "predict_real_summary/convert_image/Mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "predict_real_summary/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_real_summary/convert_image"
  op: "Cast"
  input: "predict_real_summary/convert_image/Mul"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_real_summary/predict_real/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predict_real_summary/predict_real"
      }
    }
  }
}
node {
  name: "predict_real_summary/predict_real"
  op: "ImageSummary"
  input: "predict_real_summary/predict_real/tag"
  input: "predict_real_summary/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "predict_fake_summary/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "predict_fake_summary/convert_image/Mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "predict_fake_summary/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_fake_summary/convert_image"
  op: "Cast"
  input: "predict_fake_summary/convert_image/Mul"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_fake_summary/predict_fake/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predict_fake_summary/predict_fake"
      }
    }
  }
}
node {
  name: "predict_fake_summary/predict_fake"
  op: "ImageSummary"
  input: "predict_fake_summary/predict_fake/tag"
  input: "predict_fake_summary/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "discriminator_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator_loss_1"
      }
    }
  }
}
node {
  name: "discriminator_loss_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_loss_1"
  op: "ScalarSummary"
  input: "discriminator_loss_1/tags"
  input: "discriminator_loss_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss_GAN/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator_loss_GAN"
      }
    }
  }
}
node {
  name: "generator_loss_GAN/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_loss_GAN"
  op: "ScalarSummary"
  input: "generator_loss_GAN/tags"
  input: "generator_loss_GAN/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss_L1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator_loss_L1"
      }
    }
  }
}
node {
  name: "generator_loss_L1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_loss_L1"
  op: "ScalarSummary"
  input: "generator_loss_L1/tags"
  input: "generator_loss_L1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/kernel/values/tag"
  input: "generator/encoder_1/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/bias/values/tag"
  input: "generator/encoder_1/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/kernel/values/tag"
  input: "generator/encoder_2/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/bias/values/tag"
  input: "generator/encoder_2/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/gamma/values/tag"
  input: "generator/encoder_2/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/beta/values/tag"
  input: "generator/encoder_2/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/kernel/values/tag"
  input: "generator/encoder_3/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/bias/values/tag"
  input: "generator/encoder_3/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/gamma/values/tag"
  input: "generator/encoder_3/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/beta/values/tag"
  input: "generator/encoder_3/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/kernel/values/tag"
  input: "generator/encoder_4/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/bias/values/tag"
  input: "generator/encoder_4/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/gamma/values/tag"
  input: "generator/encoder_4/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/beta/values/tag"
  input: "generator/encoder_4/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/kernel/values/tag"
  input: "generator/encoder_5/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/bias/values/tag"
  input: "generator/encoder_5/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/gamma/values/tag"
  input: "generator/encoder_5/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/beta/values/tag"
  input: "generator/encoder_5/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/kernel/values/tag"
  input: "generator/encoder_6/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/bias/values/tag"
  input: "generator/encoder_6/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/gamma/values/tag"
  input: "generator/encoder_6/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/beta/values/tag"
  input: "generator/encoder_6/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/kernel/values/tag"
  input: "generator/encoder_7/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/bias/values/tag"
  input: "generator/encoder_7/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/gamma/values/tag"
  input: "generator/encoder_7/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/beta/values/tag"
  input: "generator/encoder_7/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/kernel/values/tag"
  input: "generator/encoder_8/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/bias/values/tag"
  input: "generator/encoder_8/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/gamma/values/tag"
  input: "generator/encoder_8/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/beta/values/tag"
  input: "generator/encoder_8/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_8/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_8/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/gamma/values/tag"
  input: "generator/decoder_8/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/beta/values/tag"
  input: "generator/decoder_8/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_7/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_7/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/gamma/values/tag"
  input: "generator/decoder_7/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/beta/values/tag"
  input: "generator/decoder_7/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_6/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_6/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/gamma/values/tag"
  input: "generator/decoder_6/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/beta/values/tag"
  input: "generator/decoder_6/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_5/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_5/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/gamma/values/tag"
  input: "generator/decoder_5/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/beta/values/tag"
  input: "generator/decoder_5/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_4/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_4/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/gamma/values/tag"
  input: "generator/decoder_4/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/beta/values/tag"
  input: "generator/decoder_4/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_3/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_3/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/gamma/values/tag"
  input: "generator/decoder_3/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/beta/values/tag"
  input: "generator/decoder_3/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_2/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_2/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/gamma/values/tag"
  input: "generator/decoder_2/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/beta/values/tag"
  input: "generator/decoder_2/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_1/conv2d_transpose/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_1/conv2d_transpose/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/kernel/values/tag"
  input: "discriminator/layer_1/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/bias/values/tag"
  input: "discriminator/layer_1/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/kernel/values/tag"
  input: "discriminator/layer_2/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/bias/values/tag"
  input: "discriminator/layer_2/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_2/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/beta/values/tag"
  input: "discriminator/layer_2/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/kernel/values/tag"
  input: "discriminator/layer_3/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/bias/values/tag"
  input: "discriminator/layer_3/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_3/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/beta/values/tag"
  input: "discriminator/layer_3/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/kernel/values/tag"
  input: "discriminator/layer_4/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/bias/values/tag"
  input: "discriminator/layer_4/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_4/batch_normalization/gamma/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/beta/values/tag"
  input: "discriminator/layer_4/batch_normalization/beta/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/kernel/values/tag"
  input: "discriminator/layer_5/conv2d/kernel/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/values/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/bias/values/tag"
  input: "discriminator/layer_5/conv2d/bias/values/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNormV3_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parameter_count/Shape/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod"
  op: "Prod"
  input: "parameter_count/Shape"
  input: "parameter_count/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_1"
  op: "Prod"
  input: "parameter_count/Shape_1"
  input: "parameter_count/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_2"
  op: "Prod"
  input: "parameter_count/Shape_2"
  input: "parameter_count/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_3"
  op: "Prod"
  input: "parameter_count/Shape_3"
  input: "parameter_count/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_4"
  op: "Prod"
  input: "parameter_count/Shape_4"
  input: "parameter_count/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_5"
  op: "Prod"
  input: "parameter_count/Shape_5"
  input: "parameter_count/Const_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_6"
  op: "Prod"
  input: "parameter_count/Shape_6"
  input: "parameter_count/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_7"
  op: "Prod"
  input: "parameter_count/Shape_7"
  input: "parameter_count/Const_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_8"
  op: "Prod"
  input: "parameter_count/Shape_8"
  input: "parameter_count/Const_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_9"
  op: "Prod"
  input: "parameter_count/Shape_9"
  input: "parameter_count/Const_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_10"
  op: "Prod"
  input: "parameter_count/Shape_10"
  input: "parameter_count/Const_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_11"
  op: "Prod"
  input: "parameter_count/Shape_11"
  input: "parameter_count/Const_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_12"
  op: "Prod"
  input: "parameter_count/Shape_12"
  input: "parameter_count/Const_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_13"
  op: "Prod"
  input: "parameter_count/Shape_13"
  input: "parameter_count/Const_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_14/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_14"
  op: "Prod"
  input: "parameter_count/Shape_14"
  input: "parameter_count/Const_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_15/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_15"
  op: "Prod"
  input: "parameter_count/Shape_15"
  input: "parameter_count/Const_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_16/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_16"
  op: "Prod"
  input: "parameter_count/Shape_16"
  input: "parameter_count/Const_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_17/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_17"
  op: "Prod"
  input: "parameter_count/Shape_17"
  input: "parameter_count/Const_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_18/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_18"
  op: "Prod"
  input: "parameter_count/Shape_18"
  input: "parameter_count/Const_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_19/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_19"
  op: "Prod"
  input: "parameter_count/Shape_19"
  input: "parameter_count/Const_19"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_20/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_20"
  op: "Prod"
  input: "parameter_count/Shape_20"
  input: "parameter_count/Const_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_21/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_21"
  op: "Prod"
  input: "parameter_count/Shape_21"
  input: "parameter_count/Const_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_22/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_22"
  op: "Prod"
  input: "parameter_count/Shape_22"
  input: "parameter_count/Const_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_23/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_23"
  op: "Prod"
  input: "parameter_count/Shape_23"
  input: "parameter_count/Const_23"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_24/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_24"
  op: "Prod"
  input: "parameter_count/Shape_24"
  input: "parameter_count/Const_24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_25/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_25"
  op: "Prod"
  input: "parameter_count/Shape_25"
  input: "parameter_count/Const_25"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_26/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_26"
  op: "Prod"
  input: "parameter_count/Shape_26"
  input: "parameter_count/Const_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_27/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_27"
  op: "Prod"
  input: "parameter_count/Shape_27"
  input: "parameter_count/Const_27"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_28/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_28"
  op: "Prod"
  input: "parameter_count/Shape_28"
  input: "parameter_count/Const_28"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_29/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_29"
  op: "Prod"
  input: "parameter_count/Shape_29"
  input: "parameter_count/Const_29"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_30/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_30"
  op: "Prod"
  input: "parameter_count/Shape_30"
  input: "parameter_count/Const_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_31/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_31"
  op: "Prod"
  input: "parameter_count/Shape_31"
  input: "parameter_count/Const_31"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_32/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_32"
  op: "Prod"
  input: "parameter_count/Shape_32"
  input: "parameter_count/Const_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_33/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_33"
  op: "Prod"
  input: "parameter_count/Shape_33"
  input: "parameter_count/Const_33"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_34/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_34"
  op: "Prod"
  input: "parameter_count/Shape_34"
  input: "parameter_count/Const_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_35/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_35"
  op: "Prod"
  input: "parameter_count/Shape_35"
  input: "parameter_count/Const_35"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_36/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_36"
  op: "Prod"
  input: "parameter_count/Shape_36"
  input: "parameter_count/Const_36"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_37/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_37"
  op: "Prod"
  input: "parameter_count/Shape_37"
  input: "parameter_count/Const_37"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_38/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_38"
  op: "Prod"
  input: "parameter_count/Shape_38"
  input: "parameter_count/Const_38"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_39/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_39"
  op: "Prod"
  input: "parameter_count/Shape_39"
  input: "parameter_count/Const_39"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_40/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_40"
  op: "Prod"
  input: "parameter_count/Shape_40"
  input: "parameter_count/Const_40"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_41/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_41"
  op: "Prod"
  input: "parameter_count/Shape_41"
  input: "parameter_count/Const_41"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_42/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_42"
  op: "Prod"
  input: "parameter_count/Shape_42"
  input: "parameter_count/Const_42"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_43/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_43"
  op: "Prod"
  input: "parameter_count/Shape_43"
  input: "parameter_count/Const_43"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_44/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_44"
  op: "Prod"
  input: "parameter_count/Shape_44"
  input: "parameter_count/Const_44"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_45/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_45"
  op: "Prod"
  input: "parameter_count/Shape_45"
  input: "parameter_count/Const_45"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_46/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_46"
  op: "Prod"
  input: "parameter_count/Shape_46"
  input: "parameter_count/Const_46"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_47/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_47"
  op: "Prod"
  input: "parameter_count/Shape_47"
  input: "parameter_count/Const_47"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_48/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_48"
  op: "Prod"
  input: "parameter_count/Shape_48"
  input: "parameter_count/Const_48"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_49/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_49"
  op: "Prod"
  input: "parameter_count/Shape_49"
  input: "parameter_count/Const_49"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_50/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_50"
  op: "Prod"
  input: "parameter_count/Shape_50"
  input: "parameter_count/Const_50"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_51/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_51"
  op: "Prod"
  input: "parameter_count/Shape_51"
  input: "parameter_count/Const_51"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_52/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_52"
  op: "Prod"
  input: "parameter_count/Shape_52"
  input: "parameter_count/Const_52"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_53/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_53"
  op: "Prod"
  input: "parameter_count/Shape_53"
  input: "parameter_count/Const_53"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_54/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_54"
  op: "Prod"
  input: "parameter_count/Shape_54"
  input: "parameter_count/Const_54"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_55/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_55"
  op: "Prod"
  input: "parameter_count/Shape_55"
  input: "parameter_count/Const_55"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_56/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_56"
  op: "Prod"
  input: "parameter_count/Shape_56"
  input: "parameter_count/Const_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_57/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_57"
  op: "Prod"
  input: "parameter_count/Shape_57"
  input: "parameter_count/Const_57"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_58/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_58"
  op: "Prod"
  input: "parameter_count/Shape_58"
  input: "parameter_count/Const_58"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_59/ReadVariableOp"
  op: "ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "parameter_count/Const_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_59"
  op: "Prod"
  input: "parameter_count/Shape_59"
  input: "parameter_count/Const_59"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_60/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 6
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\006\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_60"
  op: "Prod"
  input: "parameter_count/Shape_60"
  input: "parameter_count/Const_60"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_61/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_61"
  op: "Prod"
  input: "parameter_count/Shape_61"
  input: "parameter_count/Const_61"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_62/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_62"
  op: "Prod"
  input: "parameter_count/Shape_62"
  input: "parameter_count/Const_62"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_63/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_63"
  op: "Prod"
  input: "parameter_count/Shape_63"
  input: "parameter_count/Const_63"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_64/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_64"
  op: "Prod"
  input: "parameter_count/Shape_64"
  input: "parameter_count/Const_64"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_65/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_65"
  op: "Prod"
  input: "parameter_count/Shape_65"
  input: "parameter_count/Const_65"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_66/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_66"
  op: "Prod"
  input: "parameter_count/Shape_66"
  input: "parameter_count/Const_66"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_67/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_67"
  op: "Prod"
  input: "parameter_count/Shape_67"
  input: "parameter_count/Const_67"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_68/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_68"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_68"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_68"
  op: "Prod"
  input: "parameter_count/Shape_68"
  input: "parameter_count/Const_68"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_69/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_69"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_69"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_69"
  op: "Prod"
  input: "parameter_count/Shape_69"
  input: "parameter_count/Const_69"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_70/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_70"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_70"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_70"
  op: "Prod"
  input: "parameter_count/Shape_70"
  input: "parameter_count/Const_70"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_71/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_71"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_71"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_71"
  op: "Prod"
  input: "parameter_count/Shape_71"
  input: "parameter_count/Const_71"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_72/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_72"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_72"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_72"
  op: "Prod"
  input: "parameter_count/Shape_72"
  input: "parameter_count/Const_72"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_73/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_73"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_73"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_73"
  op: "Prod"
  input: "parameter_count/Shape_73"
  input: "parameter_count/Const_73"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_74/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_74"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_74"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_74"
  op: "Prod"
  input: "parameter_count/Shape_74"
  input: "parameter_count/Const_74"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_75/ReadVariableOp"
  op: "ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "parameter_count/Shape_75"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/Const_75"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_75"
  op: "Prod"
  input: "parameter_count/Shape_75"
  input: "parameter_count/Const_75"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Rank/packed"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  input: "parameter_count/Prod_68"
  input: "parameter_count/Prod_69"
  input: "parameter_count/Prod_70"
  input: "parameter_count/Prod_71"
  input: "parameter_count/Prod_72"
  input: "parameter_count/Prod_73"
  input: "parameter_count/Prod_74"
  input: "parameter_count/Prod_75"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range"
  op: "Range"
  input: "parameter_count/range/start"
  input: "parameter_count/Rank"
  input: "parameter_count/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "parameter_count/Sum/input"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  input: "parameter_count/Prod_68"
  input: "parameter_count/Prod_69"
  input: "parameter_count/Prod_70"
  input: "parameter_count/Prod_71"
  input: "parameter_count/Prod_72"
  input: "parameter_count/Prod_73"
  input: "parameter_count/Prod_74"
  input: "parameter_count/Prod_75"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Sum"
  op: "Sum"
  input: "parameter_count/Sum/input"
  input: "parameter_count/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "discriminator/layer_1/conv2d/bias/Read/ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Read/ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage/Read/ReadVariableOp"
  input: "discriminator_train/beta1_power/Read/ReadVariableOp"
  input: "discriminator_train/beta2_power/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Read/ReadVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean/Read/ReadVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam/Read/ReadVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Read/ReadVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage/Read/ReadVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage/Read/ReadVariableOp"
  input: "generator_train/beta1_power/Read/ReadVariableOp"
  input: "generator_train/beta2_power/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias"
  input: "save/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "save/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "save/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "save/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "save/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "save/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "save/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "discriminator_train/beta1_power"
  input: "save/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "discriminator_train/beta2_power"
  input: "save/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "save/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "save/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "save/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_61"
  op: "Identity"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "save/Identity_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_62"
  op: "Identity"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_63"
  op: "Identity"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "save/Identity_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_64"
  op: "Identity"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "save/Identity_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_65"
  op: "Identity"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "save/Identity_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_66"
  op: "Identity"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_66"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "save/Identity_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_67"
  op: "Identity"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_67"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "save/Identity_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_68"
  op: "Identity"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_68"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "save/Identity_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_69"
  op: "Identity"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_69"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "save/Identity_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_70"
  op: "Identity"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_70"
  op: "AssignVariableOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "save/Identity_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_71"
  op: "Identity"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_71"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "save/Identity_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_72"
  op: "Identity"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_72"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "save/Identity_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_73"
  op: "Identity"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_73"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_74"
  op: "Identity"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_74"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "save/Identity_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_75"
  op: "Identity"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_75"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "save/Identity_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_76"
  op: "Identity"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_76"
  op: "AssignVariableOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_77"
  op: "Identity"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_77"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "save/Identity_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_78"
  op: "Identity"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_78"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "save/Identity_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_79"
  op: "Identity"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_79"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "save/Identity_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_80"
  op: "Identity"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_80"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "save/Identity_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_81"
  op: "Identity"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_81"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "save/Identity_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_82"
  op: "Identity"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_82"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "save/Identity_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_83"
  op: "Identity"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_83"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "save/Identity_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_84"
  op: "Identity"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_84"
  op: "AssignVariableOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "save/Identity_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_85"
  op: "Identity"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_85"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "save/Identity_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_86"
  op: "Identity"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_86"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "save/Identity_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_87"
  op: "Identity"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_87"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_88"
  op: "Identity"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_88"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "save/Identity_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_89"
  op: "Identity"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_89"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "save/Identity_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_90"
  op: "Identity"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_90"
  op: "AssignVariableOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_91"
  op: "Identity"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_91"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "save/Identity_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_92"
  op: "Identity"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_92"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "save/Identity_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_93"
  op: "Identity"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_93"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "save/Identity_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_94"
  op: "Identity"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_94"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "save/Identity_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_95"
  op: "Identity"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_95"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "save/Identity_95"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_96"
  op: "Identity"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_96"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "save/Identity_96"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_97"
  op: "Identity"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_97"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "save/Identity_97"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_98"
  op: "Identity"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_98"
  op: "AssignVariableOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "save/Identity_98"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_99"
  op: "Identity"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_99"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "save/Identity_99"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_100"
  op: "Identity"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_100"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "save/Identity_100"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_101"
  op: "Identity"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_101"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_101"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_102"
  op: "Identity"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_102"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "save/Identity_102"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_103"
  op: "Identity"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_103"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "save/Identity_103"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_104"
  op: "Identity"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_104"
  op: "AssignVariableOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_104"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_105"
  op: "Identity"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_105"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "save/Identity_105"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_106"
  op: "Identity"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_106"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "save/Identity_106"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_107"
  op: "Identity"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_107"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "save/Identity_107"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_108"
  op: "Identity"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_108"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "save/Identity_108"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_109"
  op: "Identity"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_109"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "save/Identity_109"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_110"
  op: "Identity"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_110"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "save/Identity_110"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_111"
  op: "Identity"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_111"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "save/Identity_111"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_112"
  op: "Identity"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_112"
  op: "AssignVariableOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "save/Identity_112"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_113"
  op: "Identity"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_113"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "save/Identity_113"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_114"
  op: "Identity"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_114"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "save/Identity_114"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_115"
  op: "Identity"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_115"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_115"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_116"
  op: "Identity"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_116"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "save/Identity_116"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_117"
  op: "Identity"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_117"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "save/Identity_117"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_118"
  op: "Identity"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_118"
  op: "AssignVariableOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_118"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_119"
  op: "Identity"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_119"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "save/Identity_119"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_120"
  op: "Identity"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_120"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "save/Identity_120"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_121"
  op: "Identity"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_121"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "save/Identity_121"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_122"
  op: "Identity"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_122"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "save/Identity_122"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_123"
  op: "Identity"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_123"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "save/Identity_123"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_124"
  op: "Identity"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_124"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "save/Identity_124"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_125"
  op: "Identity"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_125"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "save/Identity_125"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_126"
  op: "Identity"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_126"
  op: "AssignVariableOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "save/Identity_126"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_127"
  op: "Identity"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_127"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "save/Identity_127"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_128"
  op: "Identity"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_128"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "save/Identity_128"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_129"
  op: "Identity"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_129"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_129"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_130"
  op: "Identity"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_130"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "save/Identity_130"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_131"
  op: "Identity"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_131"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "save/Identity_131"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_132"
  op: "Identity"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_132"
  op: "AssignVariableOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_132"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_133"
  op: "Identity"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_133"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "save/Identity_133"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_134"
  op: "Identity"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_134"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "save/Identity_134"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_135"
  op: "Identity"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_135"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "save/Identity_135"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_136"
  op: "Identity"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_136"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "save/Identity_136"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_137"
  op: "Identity"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_137"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "save/Identity_137"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_138"
  op: "Identity"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_138"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "save/Identity_138"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_139"
  op: "Identity"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_139"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "save/Identity_139"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_140"
  op: "Identity"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_140"
  op: "AssignVariableOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "save/Identity_140"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_141"
  op: "Identity"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_141"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "save/Identity_141"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_142"
  op: "Identity"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_142"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "save/Identity_142"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_143"
  op: "Identity"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_143"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_143"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_144"
  op: "Identity"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_144"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "save/Identity_144"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_145"
  op: "Identity"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_145"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "save/Identity_145"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_146"
  op: "Identity"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_146"
  op: "AssignVariableOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_146"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_147"
  op: "Identity"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_147"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "save/Identity_147"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_148"
  op: "Identity"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_148"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "save/Identity_148"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_149"
  op: "Identity"
  input: "save/RestoreV2:149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_149"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "save/Identity_149"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_150"
  op: "Identity"
  input: "save/RestoreV2:150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_150"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "save/Identity_150"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_151"
  op: "Identity"
  input: "save/RestoreV2:151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_151"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "save/Identity_151"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_152"
  op: "Identity"
  input: "save/RestoreV2:152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_152"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "save/Identity_152"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_153"
  op: "Identity"
  input: "save/RestoreV2:153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_153"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "save/Identity_153"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_154"
  op: "Identity"
  input: "save/RestoreV2:154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_154"
  op: "AssignVariableOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "save/Identity_154"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_155"
  op: "Identity"
  input: "save/RestoreV2:155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_155"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "save/Identity_155"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_156"
  op: "Identity"
  input: "save/RestoreV2:156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_156"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "save/Identity_156"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_157"
  op: "Identity"
  input: "save/RestoreV2:157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_157"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "save/Identity_157"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_158"
  op: "Identity"
  input: "save/RestoreV2:158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_158"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "save/Identity_158"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_159"
  op: "Identity"
  input: "save/RestoreV2:159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_159"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "save/Identity_159"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_160"
  op: "Identity"
  input: "save/RestoreV2:160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_160"
  op: "AssignVariableOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "save/Identity_160"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_161"
  op: "Identity"
  input: "save/RestoreV2:161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_161"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias"
  input: "save/Identity_161"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_162"
  op: "Identity"
  input: "save/RestoreV2:162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_162"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "save/Identity_162"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_163"
  op: "Identity"
  input: "save/RestoreV2:163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_163"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "save/Identity_163"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_164"
  op: "Identity"
  input: "save/RestoreV2:164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_164"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel"
  input: "save/Identity_164"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_165"
  op: "Identity"
  input: "save/RestoreV2:165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_165"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "save/Identity_165"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_166"
  op: "Identity"
  input: "save/RestoreV2:166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_166"
  op: "AssignVariableOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "save/Identity_166"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_167"
  op: "Identity"
  input: "save/RestoreV2:167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_167"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "save/Identity_167"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_168"
  op: "Identity"
  input: "save/RestoreV2:168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_168"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "save/Identity_168"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_169"
  op: "Identity"
  input: "save/RestoreV2:169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_169"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "save/Identity_169"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_170"
  op: "Identity"
  input: "save/RestoreV2:170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_170"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "save/Identity_170"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_171"
  op: "Identity"
  input: "save/RestoreV2:171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_171"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "save/Identity_171"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_172"
  op: "Identity"
  input: "save/RestoreV2:172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_172"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "save/Identity_172"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_173"
  op: "Identity"
  input: "save/RestoreV2:173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_173"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "save/Identity_173"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_174"
  op: "Identity"
  input: "save/RestoreV2:174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_174"
  op: "AssignVariableOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "save/Identity_174"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_175"
  op: "Identity"
  input: "save/RestoreV2:175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_175"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias"
  input: "save/Identity_175"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_176"
  op: "Identity"
  input: "save/RestoreV2:176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_176"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "save/Identity_176"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_177"
  op: "Identity"
  input: "save/RestoreV2:177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_177"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "save/Identity_177"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_178"
  op: "Identity"
  input: "save/RestoreV2:178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_178"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel"
  input: "save/Identity_178"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_179"
  op: "Identity"
  input: "save/RestoreV2:179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_179"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "save/Identity_179"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_180"
  op: "Identity"
  input: "save/RestoreV2:180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_180"
  op: "AssignVariableOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "save/Identity_180"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_181"
  op: "Identity"
  input: "save/RestoreV2:181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_181"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "save/Identity_181"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_182"
  op: "Identity"
  input: "save/RestoreV2:182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_182"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "save/Identity_182"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_183"
  op: "Identity"
  input: "save/RestoreV2:183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_183"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "save/Identity_183"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_184"
  op: "Identity"
  input: "save/RestoreV2:184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_184"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "save/Identity_184"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_185"
  op: "Identity"
  input: "save/RestoreV2:185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_185"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "save/Identity_185"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_186"
  op: "Identity"
  input: "save/RestoreV2:186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_186"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "save/Identity_186"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_187"
  op: "Identity"
  input: "save/RestoreV2:187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_187"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "save/Identity_187"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_188"
  op: "Identity"
  input: "save/RestoreV2:188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_188"
  op: "AssignVariableOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "save/Identity_188"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_189"
  op: "Identity"
  input: "save/RestoreV2:189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_189"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias"
  input: "save/Identity_189"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_190"
  op: "Identity"
  input: "save/RestoreV2:190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_190"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "save/Identity_190"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_191"
  op: "Identity"
  input: "save/RestoreV2:191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_191"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "save/Identity_191"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_192"
  op: "Identity"
  input: "save/RestoreV2:192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_192"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel"
  input: "save/Identity_192"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_193"
  op: "Identity"
  input: "save/RestoreV2:193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_193"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "save/Identity_193"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_194"
  op: "Identity"
  input: "save/RestoreV2:194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_194"
  op: "AssignVariableOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "save/Identity_194"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_195"
  op: "Identity"
  input: "save/RestoreV2:195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_195"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "save/Identity_195"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_196"
  op: "Identity"
  input: "save/RestoreV2:196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_196"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "save/Identity_196"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_197"
  op: "Identity"
  input: "save/RestoreV2:197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_197"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "save/Identity_197"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_198"
  op: "Identity"
  input: "save/RestoreV2:198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_198"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "save/Identity_198"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_199"
  op: "Identity"
  input: "save/RestoreV2:199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_199"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "save/Identity_199"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_200"
  op: "Identity"
  input: "save/RestoreV2:200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_200"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "save/Identity_200"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_201"
  op: "Identity"
  input: "save/RestoreV2:201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_201"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "save/Identity_201"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_202"
  op: "Identity"
  input: "save/RestoreV2:202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_202"
  op: "AssignVariableOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "save/Identity_202"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_203"
  op: "Identity"
  input: "save/RestoreV2:203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_203"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias"
  input: "save/Identity_203"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_204"
  op: "Identity"
  input: "save/RestoreV2:204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_204"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "save/Identity_204"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_205"
  op: "Identity"
  input: "save/RestoreV2:205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_205"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "save/Identity_205"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_206"
  op: "Identity"
  input: "save/RestoreV2:206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_206"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel"
  input: "save/Identity_206"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_207"
  op: "Identity"
  input: "save/RestoreV2:207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_207"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "save/Identity_207"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_208"
  op: "Identity"
  input: "save/RestoreV2:208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_208"
  op: "AssignVariableOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "save/Identity_208"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_209"
  op: "Identity"
  input: "save/RestoreV2:209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_209"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "save/Identity_209"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_210"
  op: "Identity"
  input: "save/RestoreV2:210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_210"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "save/Identity_210"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_211"
  op: "Identity"
  input: "save/RestoreV2:211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_211"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "save/Identity_211"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_212"
  op: "Identity"
  input: "save/RestoreV2:212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_212"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "save/Identity_212"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_213"
  op: "Identity"
  input: "save/RestoreV2:213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_213"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "save/Identity_213"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_214"
  op: "Identity"
  input: "save/RestoreV2:214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_214"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "save/Identity_214"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_215"
  op: "Identity"
  input: "save/RestoreV2:215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_215"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "save/Identity_215"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_216"
  op: "Identity"
  input: "save/RestoreV2:216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_216"
  op: "AssignVariableOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "save/Identity_216"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_217"
  op: "Identity"
  input: "save/RestoreV2:217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_217"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias"
  input: "save/Identity_217"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_218"
  op: "Identity"
  input: "save/RestoreV2:218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_218"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "save/Identity_218"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_219"
  op: "Identity"
  input: "save/RestoreV2:219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_219"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "save/Identity_219"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_220"
  op: "Identity"
  input: "save/RestoreV2:220"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_220"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel"
  input: "save/Identity_220"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_221"
  op: "Identity"
  input: "save/RestoreV2:221"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_221"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "save/Identity_221"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_222"
  op: "Identity"
  input: "save/RestoreV2:222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_222"
  op: "AssignVariableOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "save/Identity_222"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_223"
  op: "Identity"
  input: "save/RestoreV2:223"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_223"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "save/Identity_223"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_224"
  op: "Identity"
  input: "save/RestoreV2:224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_224"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "save/Identity_224"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_225"
  op: "Identity"
  input: "save/RestoreV2:225"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_225"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "save/Identity_225"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_226"
  op: "Identity"
  input: "save/RestoreV2:226"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_226"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "save/Identity_226"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_227"
  op: "Identity"
  input: "save/RestoreV2:227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_227"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "save/Identity_227"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_228"
  op: "Identity"
  input: "save/RestoreV2:228"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_228"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "save/Identity_228"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_229"
  op: "Identity"
  input: "save/RestoreV2:229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_229"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "save/Identity_229"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_230"
  op: "Identity"
  input: "save/RestoreV2:230"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_230"
  op: "AssignVariableOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "save/Identity_230"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_231"
  op: "Identity"
  input: "save/RestoreV2:231"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_231"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias"
  input: "save/Identity_231"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_232"
  op: "Identity"
  input: "save/RestoreV2:232"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_232"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "save/Identity_232"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_233"
  op: "Identity"
  input: "save/RestoreV2:233"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_233"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "save/Identity_233"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_234"
  op: "Identity"
  input: "save/RestoreV2:234"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_234"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel"
  input: "save/Identity_234"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_235"
  op: "Identity"
  input: "save/RestoreV2:235"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_235"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "save/Identity_235"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_236"
  op: "Identity"
  input: "save/RestoreV2:236"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_236"
  op: "AssignVariableOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "save/Identity_236"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_237"
  op: "Identity"
  input: "save/RestoreV2:237"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_237"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "save/Identity_237"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_238"
  op: "Identity"
  input: "save/RestoreV2:238"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_238"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "save/Identity_238"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_239"
  op: "Identity"
  input: "save/RestoreV2:239"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_239"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "save/Identity_239"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_240"
  op: "Identity"
  input: "save/RestoreV2:240"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_240"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "save/Identity_240"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_241"
  op: "Identity"
  input: "save/RestoreV2:241"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_241"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "save/Identity_241"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_242"
  op: "Identity"
  input: "save/RestoreV2:242"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_242"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "save/Identity_242"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_243"
  op: "Identity"
  input: "save/RestoreV2:243"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_243"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "save/Identity_243"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_244"
  op: "Identity"
  input: "save/RestoreV2:244"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_244"
  op: "AssignVariableOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "save/Identity_244"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_245"
  op: "Identity"
  input: "save/RestoreV2:245"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_245"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias"
  input: "save/Identity_245"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_246"
  op: "Identity"
  input: "save/RestoreV2:246"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_246"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "save/Identity_246"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_247"
  op: "Identity"
  input: "save/RestoreV2:247"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_247"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "save/Identity_247"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_248"
  op: "Identity"
  input: "save/RestoreV2:248"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_248"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel"
  input: "save/Identity_248"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_249"
  op: "Identity"
  input: "save/RestoreV2:249"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_249"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "save/Identity_249"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_250"
  op: "Identity"
  input: "save/RestoreV2:250"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_250"
  op: "AssignVariableOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "save/Identity_250"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_251"
  op: "Identity"
  input: "save/RestoreV2:251"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_251"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "save/Identity_251"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_252"
  op: "Identity"
  input: "save/RestoreV2:252"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_252"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "save/Identity_252"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_253"
  op: "Identity"
  input: "save/RestoreV2:253"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_253"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "save/Identity_253"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_254"
  op: "Identity"
  input: "save/RestoreV2:254"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_254"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "save/Identity_254"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_255"
  op: "Identity"
  input: "save/RestoreV2:255"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_255"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "save/Identity_255"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_256"
  op: "Identity"
  input: "save/RestoreV2:256"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_256"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "save/Identity_256"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_257"
  op: "Identity"
  input: "save/RestoreV2:257"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_257"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "save/Identity_257"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_258"
  op: "Identity"
  input: "save/RestoreV2:258"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_258"
  op: "AssignVariableOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "save/Identity_258"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_259"
  op: "Identity"
  input: "save/RestoreV2:259"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_259"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias"
  input: "save/Identity_259"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_260"
  op: "Identity"
  input: "save/RestoreV2:260"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_260"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "save/Identity_260"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_261"
  op: "Identity"
  input: "save/RestoreV2:261"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_261"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "save/Identity_261"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_262"
  op: "Identity"
  input: "save/RestoreV2:262"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_262"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel"
  input: "save/Identity_262"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_263"
  op: "Identity"
  input: "save/RestoreV2:263"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_263"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "save/Identity_263"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_264"
  op: "Identity"
  input: "save/RestoreV2:264"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_264"
  op: "AssignVariableOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "save/Identity_264"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_265"
  op: "Identity"
  input: "save/RestoreV2:265"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_265"
  op: "AssignVariableOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "save/Identity_265"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_266"
  op: "Identity"
  input: "save/RestoreV2:266"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_266"
  op: "AssignVariableOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "save/Identity_266"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_267"
  op: "Identity"
  input: "save/RestoreV2:267"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_267"
  op: "AssignVariableOp"
  input: "generator_train/beta1_power"
  input: "save/Identity_267"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_268"
  op: "Identity"
  input: "save/RestoreV2:268"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_268"
  op: "AssignVariableOp"
  input: "generator_train/beta2_power"
  input: "save/Identity_268"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/Identity_269"
  op: "Identity"
  input: "save/RestoreV2:269"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_269"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_269"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_100"
  input: "^save/AssignVariableOp_101"
  input: "^save/AssignVariableOp_102"
  input: "^save/AssignVariableOp_103"
  input: "^save/AssignVariableOp_104"
  input: "^save/AssignVariableOp_105"
  input: "^save/AssignVariableOp_106"
  input: "^save/AssignVariableOp_107"
  input: "^save/AssignVariableOp_108"
  input: "^save/AssignVariableOp_109"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_110"
  input: "^save/AssignVariableOp_111"
  input: "^save/AssignVariableOp_112"
  input: "^save/AssignVariableOp_113"
  input: "^save/AssignVariableOp_114"
  input: "^save/AssignVariableOp_115"
  input: "^save/AssignVariableOp_116"
  input: "^save/AssignVariableOp_117"
  input: "^save/AssignVariableOp_118"
  input: "^save/AssignVariableOp_119"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_120"
  input: "^save/AssignVariableOp_121"
  input: "^save/AssignVariableOp_122"
  input: "^save/AssignVariableOp_123"
  input: "^save/AssignVariableOp_124"
  input: "^save/AssignVariableOp_125"
  input: "^save/AssignVariableOp_126"
  input: "^save/AssignVariableOp_127"
  input: "^save/AssignVariableOp_128"
  input: "^save/AssignVariableOp_129"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_130"
  input: "^save/AssignVariableOp_131"
  input: "^save/AssignVariableOp_132"
  input: "^save/AssignVariableOp_133"
  input: "^save/AssignVariableOp_134"
  input: "^save/AssignVariableOp_135"
  input: "^save/AssignVariableOp_136"
  input: "^save/AssignVariableOp_137"
  input: "^save/AssignVariableOp_138"
  input: "^save/AssignVariableOp_139"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_140"
  input: "^save/AssignVariableOp_141"
  input: "^save/AssignVariableOp_142"
  input: "^save/AssignVariableOp_143"
  input: "^save/AssignVariableOp_144"
  input: "^save/AssignVariableOp_145"
  input: "^save/AssignVariableOp_146"
  input: "^save/AssignVariableOp_147"
  input: "^save/AssignVariableOp_148"
  input: "^save/AssignVariableOp_149"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_150"
  input: "^save/AssignVariableOp_151"
  input: "^save/AssignVariableOp_152"
  input: "^save/AssignVariableOp_153"
  input: "^save/AssignVariableOp_154"
  input: "^save/AssignVariableOp_155"
  input: "^save/AssignVariableOp_156"
  input: "^save/AssignVariableOp_157"
  input: "^save/AssignVariableOp_158"
  input: "^save/AssignVariableOp_159"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_160"
  input: "^save/AssignVariableOp_161"
  input: "^save/AssignVariableOp_162"
  input: "^save/AssignVariableOp_163"
  input: "^save/AssignVariableOp_164"
  input: "^save/AssignVariableOp_165"
  input: "^save/AssignVariableOp_166"
  input: "^save/AssignVariableOp_167"
  input: "^save/AssignVariableOp_168"
  input: "^save/AssignVariableOp_169"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_170"
  input: "^save/AssignVariableOp_171"
  input: "^save/AssignVariableOp_172"
  input: "^save/AssignVariableOp_173"
  input: "^save/AssignVariableOp_174"
  input: "^save/AssignVariableOp_175"
  input: "^save/AssignVariableOp_176"
  input: "^save/AssignVariableOp_177"
  input: "^save/AssignVariableOp_178"
  input: "^save/AssignVariableOp_179"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_180"
  input: "^save/AssignVariableOp_181"
  input: "^save/AssignVariableOp_182"
  input: "^save/AssignVariableOp_183"
  input: "^save/AssignVariableOp_184"
  input: "^save/AssignVariableOp_185"
  input: "^save/AssignVariableOp_186"
  input: "^save/AssignVariableOp_187"
  input: "^save/AssignVariableOp_188"
  input: "^save/AssignVariableOp_189"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_190"
  input: "^save/AssignVariableOp_191"
  input: "^save/AssignVariableOp_192"
  input: "^save/AssignVariableOp_193"
  input: "^save/AssignVariableOp_194"
  input: "^save/AssignVariableOp_195"
  input: "^save/AssignVariableOp_196"
  input: "^save/AssignVariableOp_197"
  input: "^save/AssignVariableOp_198"
  input: "^save/AssignVariableOp_199"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_200"
  input: "^save/AssignVariableOp_201"
  input: "^save/AssignVariableOp_202"
  input: "^save/AssignVariableOp_203"
  input: "^save/AssignVariableOp_204"
  input: "^save/AssignVariableOp_205"
  input: "^save/AssignVariableOp_206"
  input: "^save/AssignVariableOp_207"
  input: "^save/AssignVariableOp_208"
  input: "^save/AssignVariableOp_209"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_210"
  input: "^save/AssignVariableOp_211"
  input: "^save/AssignVariableOp_212"
  input: "^save/AssignVariableOp_213"
  input: "^save/AssignVariableOp_214"
  input: "^save/AssignVariableOp_215"
  input: "^save/AssignVariableOp_216"
  input: "^save/AssignVariableOp_217"
  input: "^save/AssignVariableOp_218"
  input: "^save/AssignVariableOp_219"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_220"
  input: "^save/AssignVariableOp_221"
  input: "^save/AssignVariableOp_222"
  input: "^save/AssignVariableOp_223"
  input: "^save/AssignVariableOp_224"
  input: "^save/AssignVariableOp_225"
  input: "^save/AssignVariableOp_226"
  input: "^save/AssignVariableOp_227"
  input: "^save/AssignVariableOp_228"
  input: "^save/AssignVariableOp_229"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_230"
  input: "^save/AssignVariableOp_231"
  input: "^save/AssignVariableOp_232"
  input: "^save/AssignVariableOp_233"
  input: "^save/AssignVariableOp_234"
  input: "^save/AssignVariableOp_235"
  input: "^save/AssignVariableOp_236"
  input: "^save/AssignVariableOp_237"
  input: "^save/AssignVariableOp_238"
  input: "^save/AssignVariableOp_239"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_240"
  input: "^save/AssignVariableOp_241"
  input: "^save/AssignVariableOp_242"
  input: "^save/AssignVariableOp_243"
  input: "^save/AssignVariableOp_244"
  input: "^save/AssignVariableOp_245"
  input: "^save/AssignVariableOp_246"
  input: "^save/AssignVariableOp_247"
  input: "^save/AssignVariableOp_248"
  input: "^save/AssignVariableOp_249"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_250"
  input: "^save/AssignVariableOp_251"
  input: "^save/AssignVariableOp_252"
  input: "^save/AssignVariableOp_253"
  input: "^save/AssignVariableOp_254"
  input: "^save/AssignVariableOp_255"
  input: "^save/AssignVariableOp_256"
  input: "^save/AssignVariableOp_257"
  input: "^save/AssignVariableOp_258"
  input: "^save/AssignVariableOp_259"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_260"
  input: "^save/AssignVariableOp_261"
  input: "^save/AssignVariableOp_262"
  input: "^save/AssignVariableOp_263"
  input: "^save/AssignVariableOp_264"
  input: "^save/AssignVariableOp_265"
  input: "^save/AssignVariableOp_266"
  input: "^save/AssignVariableOp_267"
  input: "^save/AssignVariableOp_268"
  input: "^save/AssignVariableOp_269"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_48"
  input: "^save/AssignVariableOp_49"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_50"
  input: "^save/AssignVariableOp_51"
  input: "^save/AssignVariableOp_52"
  input: "^save/AssignVariableOp_53"
  input: "^save/AssignVariableOp_54"
  input: "^save/AssignVariableOp_55"
  input: "^save/AssignVariableOp_56"
  input: "^save/AssignVariableOp_57"
  input: "^save/AssignVariableOp_58"
  input: "^save/AssignVariableOp_59"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_60"
  input: "^save/AssignVariableOp_61"
  input: "^save/AssignVariableOp_62"
  input: "^save/AssignVariableOp_63"
  input: "^save/AssignVariableOp_64"
  input: "^save/AssignVariableOp_65"
  input: "^save/AssignVariableOp_66"
  input: "^save/AssignVariableOp_67"
  input: "^save/AssignVariableOp_68"
  input: "^save/AssignVariableOp_69"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_70"
  input: "^save/AssignVariableOp_71"
  input: "^save/AssignVariableOp_72"
  input: "^save/AssignVariableOp_73"
  input: "^save/AssignVariableOp_74"
  input: "^save/AssignVariableOp_75"
  input: "^save/AssignVariableOp_76"
  input: "^save/AssignVariableOp_77"
  input: "^save/AssignVariableOp_78"
  input: "^save/AssignVariableOp_79"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_80"
  input: "^save/AssignVariableOp_81"
  input: "^save/AssignVariableOp_82"
  input: "^save/AssignVariableOp_83"
  input: "^save/AssignVariableOp_84"
  input: "^save/AssignVariableOp_85"
  input: "^save/AssignVariableOp_86"
  input: "^save/AssignVariableOp_87"
  input: "^save/AssignVariableOp_88"
  input: "^save/AssignVariableOp_89"
  input: "^save/AssignVariableOp_9"
  input: "^save/AssignVariableOp_90"
  input: "^save/AssignVariableOp_91"
  input: "^save/AssignVariableOp_92"
  input: "^save/AssignVariableOp_93"
  input: "^save/AssignVariableOp_94"
  input: "^save/AssignVariableOp_95"
  input: "^save/AssignVariableOp_96"
  input: "^save/AssignVariableOp_97"
  input: "^save/AssignVariableOp_98"
  input: "^save/AssignVariableOp_99"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_60"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_61"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_62"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_63"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_64"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_65"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_66"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_67"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_68"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_69"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_70"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_71"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_72"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_73"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_74"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_75"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_76"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_77"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_78"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_79"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_80"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_81"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_82"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_83"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_84"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_85"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_86"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_87"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_88"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_89"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_90"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_91"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_92"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_93"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_94"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_95"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_96"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_97"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_98"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_99"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_100"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_101"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_102"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_103"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_104"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_105"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_106"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_107"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_108"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_109"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_110"
  op: "VarIsInitializedOp"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_111"
  op: "VarIsInitializedOp"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_112"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_113"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_114"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_115"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_116"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_117"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_118"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_119"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_120"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_121"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_122"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_123"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_124"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_125"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_126"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_127"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_128"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_129"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_130"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_131"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_132"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_133"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_134"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_135"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_136"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_137"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_138"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_139"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_140"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_141"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_142"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_143"
  op: "VarIsInitializedOp"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_144"
  op: "VarIsInitializedOp"
  input: "generator_train/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_145"
  op: "VarIsInitializedOp"
  input: "generator_train/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_146"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_147"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_148"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_149"
  op: "VarIsInitializedOp"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_150"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_151"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_152"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_153"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_154"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_155"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_156"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_157"
  op: "VarIsInitializedOp"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_158"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_159"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_160"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_161"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_162"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_163"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_164"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_165"
  op: "VarIsInitializedOp"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_166"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_167"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_168"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_169"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_170"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_171"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_172"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_173"
  op: "VarIsInitializedOp"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_174"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_175"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_176"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_177"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_178"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_179"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_180"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_181"
  op: "VarIsInitializedOp"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_182"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_183"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_184"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_185"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_186"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_187"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_188"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_189"
  op: "VarIsInitializedOp"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_190"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_191"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_192"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_193"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_194"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_195"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_196"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_197"
  op: "VarIsInitializedOp"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_198"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_199"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_200"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_201"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_202"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_203"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_204"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_205"
  op: "VarIsInitializedOp"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_206"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_207"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_208"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_209"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_210"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_211"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_212"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_213"
  op: "VarIsInitializedOp"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_214"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_215"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_216"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_217"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_218"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_219"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_220"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_221"
  op: "VarIsInitializedOp"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_222"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_223"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_224"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_225"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_226"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_227"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_228"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_229"
  op: "VarIsInitializedOp"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_230"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_231"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_232"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_233"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_234"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_235"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_236"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_237"
  op: "VarIsInitializedOp"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_238"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_239"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_240"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_241"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_242"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_243"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_244"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_245"
  op: "VarIsInitializedOp"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_246"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_247"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_248"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_249"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_250"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_251"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_252"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_253"
  op: "VarIsInitializedOp"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_254"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_255"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_256"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_257"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_258"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_259"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_260"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_261"
  op: "VarIsInitializedOp"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_262"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_263"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_264"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_265"
  op: "VarIsInitializedOp"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_266"
  op: "VarIsInitializedOp"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_267"
  op: "VarIsInitializedOp"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_268"
  op: "VarIsInitializedOp"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_269"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/VarIsInitializedOp_38"
  input: "report_uninitialized_variables/VarIsInitializedOp_39"
  input: "report_uninitialized_variables/VarIsInitializedOp_40"
  input: "report_uninitialized_variables/VarIsInitializedOp_41"
  input: "report_uninitialized_variables/VarIsInitializedOp_42"
  input: "report_uninitialized_variables/VarIsInitializedOp_43"
  input: "report_uninitialized_variables/VarIsInitializedOp_44"
  input: "report_uninitialized_variables/VarIsInitializedOp_45"
  input: "report_uninitialized_variables/VarIsInitializedOp_46"
  input: "report_uninitialized_variables/VarIsInitializedOp_47"
  input: "report_uninitialized_variables/VarIsInitializedOp_48"
  input: "report_uninitialized_variables/VarIsInitializedOp_49"
  input: "report_uninitialized_variables/VarIsInitializedOp_50"
  input: "report_uninitialized_variables/VarIsInitializedOp_51"
  input: "report_uninitialized_variables/VarIsInitializedOp_52"
  input: "report_uninitialized_variables/VarIsInitializedOp_53"
  input: "report_uninitialized_variables/VarIsInitializedOp_54"
  input: "report_uninitialized_variables/VarIsInitializedOp_55"
  input: "report_uninitialized_variables/VarIsInitializedOp_56"
  input: "report_uninitialized_variables/VarIsInitializedOp_57"
  input: "report_uninitialized_variables/VarIsInitializedOp_58"
  input: "report_uninitialized_variables/VarIsInitializedOp_59"
  input: "report_uninitialized_variables/VarIsInitializedOp_60"
  input: "report_uninitialized_variables/VarIsInitializedOp_61"
  input: "report_uninitialized_variables/VarIsInitializedOp_62"
  input: "report_uninitialized_variables/VarIsInitializedOp_63"
  input: "report_uninitialized_variables/VarIsInitializedOp_64"
  input: "report_uninitialized_variables/VarIsInitializedOp_65"
  input: "report_uninitialized_variables/VarIsInitializedOp_66"
  input: "report_uninitialized_variables/VarIsInitializedOp_67"
  input: "report_uninitialized_variables/VarIsInitializedOp_68"
  input: "report_uninitialized_variables/VarIsInitializedOp_69"
  input: "report_uninitialized_variables/VarIsInitializedOp_70"
  input: "report_uninitialized_variables/VarIsInitializedOp_71"
  input: "report_uninitialized_variables/VarIsInitializedOp_72"
  input: "report_uninitialized_variables/VarIsInitializedOp_73"
  input: "report_uninitialized_variables/VarIsInitializedOp_74"
  input: "report_uninitialized_variables/VarIsInitializedOp_75"
  input: "report_uninitialized_variables/VarIsInitializedOp_76"
  input: "report_uninitialized_variables/VarIsInitializedOp_77"
  input: "report_uninitialized_variables/VarIsInitializedOp_78"
  input: "report_uninitialized_variables/VarIsInitializedOp_79"
  input: "report_uninitialized_variables/VarIsInitializedOp_80"
  input: "report_uninitialized_variables/VarIsInitializedOp_81"
  input: "report_uninitialized_variables/VarIsInitializedOp_82"
  input: "report_uninitialized_variables/VarIsInitializedOp_83"
  input: "report_uninitialized_variables/VarIsInitializedOp_84"
  input: "report_uninitialized_variables/VarIsInitializedOp_85"
  input: "report_uninitialized_variables/VarIsInitializedOp_86"
  input: "report_uninitialized_variables/VarIsInitializedOp_87"
  input: "report_uninitialized_variables/VarIsInitializedOp_88"
  input: "report_uninitialized_variables/VarIsInitializedOp_89"
  input: "report_uninitialized_variables/VarIsInitializedOp_90"
  input: "report_uninitialized_variables/VarIsInitializedOp_91"
  input: "report_uninitialized_variables/VarIsInitializedOp_92"
  input: "report_uninitialized_variables/VarIsInitializedOp_93"
  input: "report_uninitialized_variables/VarIsInitializedOp_94"
  input: "report_uninitialized_variables/VarIsInitializedOp_95"
  input: "report_uninitialized_variables/VarIsInitializedOp_96"
  input: "report_uninitialized_variables/VarIsInitializedOp_97"
  input: "report_uninitialized_variables/VarIsInitializedOp_98"
  input: "report_uninitialized_variables/VarIsInitializedOp_99"
  input: "report_uninitialized_variables/VarIsInitializedOp_100"
  input: "report_uninitialized_variables/VarIsInitializedOp_101"
  input: "report_uninitialized_variables/VarIsInitializedOp_102"
  input: "report_uninitialized_variables/VarIsInitializedOp_103"
  input: "report_uninitialized_variables/VarIsInitializedOp_104"
  input: "report_uninitialized_variables/VarIsInitializedOp_105"
  input: "report_uninitialized_variables/VarIsInitializedOp_106"
  input: "report_uninitialized_variables/VarIsInitializedOp_107"
  input: "report_uninitialized_variables/VarIsInitializedOp_108"
  input: "report_uninitialized_variables/VarIsInitializedOp_109"
  input: "report_uninitialized_variables/VarIsInitializedOp_110"
  input: "report_uninitialized_variables/VarIsInitializedOp_111"
  input: "report_uninitialized_variables/VarIsInitializedOp_112"
  input: "report_uninitialized_variables/VarIsInitializedOp_113"
  input: "report_uninitialized_variables/VarIsInitializedOp_114"
  input: "report_uninitialized_variables/VarIsInitializedOp_115"
  input: "report_uninitialized_variables/VarIsInitializedOp_116"
  input: "report_uninitialized_variables/VarIsInitializedOp_117"
  input: "report_uninitialized_variables/VarIsInitializedOp_118"
  input: "report_uninitialized_variables/VarIsInitializedOp_119"
  input: "report_uninitialized_variables/VarIsInitializedOp_120"
  input: "report_uninitialized_variables/VarIsInitializedOp_121"
  input: "report_uninitialized_variables/VarIsInitializedOp_122"
  input: "report_uninitialized_variables/VarIsInitializedOp_123"
  input: "report_uninitialized_variables/VarIsInitializedOp_124"
  input: "report_uninitialized_variables/VarIsInitializedOp_125"
  input: "report_uninitialized_variables/VarIsInitializedOp_126"
  input: "report_uninitialized_variables/VarIsInitializedOp_127"
  input: "report_uninitialized_variables/VarIsInitializedOp_128"
  input: "report_uninitialized_variables/VarIsInitializedOp_129"
  input: "report_uninitialized_variables/VarIsInitializedOp_130"
  input: "report_uninitialized_variables/VarIsInitializedOp_131"
  input: "report_uninitialized_variables/VarIsInitializedOp_132"
  input: "report_uninitialized_variables/VarIsInitializedOp_133"
  input: "report_uninitialized_variables/VarIsInitializedOp_134"
  input: "report_uninitialized_variables/VarIsInitializedOp_135"
  input: "report_uninitialized_variables/VarIsInitializedOp_136"
  input: "report_uninitialized_variables/VarIsInitializedOp_137"
  input: "report_uninitialized_variables/VarIsInitializedOp_138"
  input: "report_uninitialized_variables/VarIsInitializedOp_139"
  input: "report_uninitialized_variables/VarIsInitializedOp_140"
  input: "report_uninitialized_variables/VarIsInitializedOp_141"
  input: "report_uninitialized_variables/VarIsInitializedOp_142"
  input: "report_uninitialized_variables/VarIsInitializedOp_143"
  input: "report_uninitialized_variables/VarIsInitializedOp_144"
  input: "report_uninitialized_variables/VarIsInitializedOp_145"
  input: "report_uninitialized_variables/VarIsInitializedOp_146"
  input: "report_uninitialized_variables/VarIsInitializedOp_147"
  input: "report_uninitialized_variables/VarIsInitializedOp_148"
  input: "report_uninitialized_variables/VarIsInitializedOp_149"
  input: "report_uninitialized_variables/VarIsInitializedOp_150"
  input: "report_uninitialized_variables/VarIsInitializedOp_151"
  input: "report_uninitialized_variables/VarIsInitializedOp_152"
  input: "report_uninitialized_variables/VarIsInitializedOp_153"
  input: "report_uninitialized_variables/VarIsInitializedOp_154"
  input: "report_uninitialized_variables/VarIsInitializedOp_155"
  input: "report_uninitialized_variables/VarIsInitializedOp_156"
  input: "report_uninitialized_variables/VarIsInitializedOp_157"
  input: "report_uninitialized_variables/VarIsInitializedOp_158"
  input: "report_uninitialized_variables/VarIsInitializedOp_159"
  input: "report_uninitialized_variables/VarIsInitializedOp_160"
  input: "report_uninitialized_variables/VarIsInitializedOp_161"
  input: "report_uninitialized_variables/VarIsInitializedOp_162"
  input: "report_uninitialized_variables/VarIsInitializedOp_163"
  input: "report_uninitialized_variables/VarIsInitializedOp_164"
  input: "report_uninitialized_variables/VarIsInitializedOp_165"
  input: "report_uninitialized_variables/VarIsInitializedOp_166"
  input: "report_uninitialized_variables/VarIsInitializedOp_167"
  input: "report_uninitialized_variables/VarIsInitializedOp_168"
  input: "report_uninitialized_variables/VarIsInitializedOp_169"
  input: "report_uninitialized_variables/VarIsInitializedOp_170"
  input: "report_uninitialized_variables/VarIsInitializedOp_171"
  input: "report_uninitialized_variables/VarIsInitializedOp_172"
  input: "report_uninitialized_variables/VarIsInitializedOp_173"
  input: "report_uninitialized_variables/VarIsInitializedOp_174"
  input: "report_uninitialized_variables/VarIsInitializedOp_175"
  input: "report_uninitialized_variables/VarIsInitializedOp_176"
  input: "report_uninitialized_variables/VarIsInitializedOp_177"
  input: "report_uninitialized_variables/VarIsInitializedOp_178"
  input: "report_uninitialized_variables/VarIsInitializedOp_179"
  input: "report_uninitialized_variables/VarIsInitializedOp_180"
  input: "report_uninitialized_variables/VarIsInitializedOp_181"
  input: "report_uninitialized_variables/VarIsInitializedOp_182"
  input: "report_uninitialized_variables/VarIsInitializedOp_183"
  input: "report_uninitialized_variables/VarIsInitializedOp_184"
  input: "report_uninitialized_variables/VarIsInitializedOp_185"
  input: "report_uninitialized_variables/VarIsInitializedOp_186"
  input: "report_uninitialized_variables/VarIsInitializedOp_187"
  input: "report_uninitialized_variables/VarIsInitializedOp_188"
  input: "report_uninitialized_variables/VarIsInitializedOp_189"
  input: "report_uninitialized_variables/VarIsInitializedOp_190"
  input: "report_uninitialized_variables/VarIsInitializedOp_191"
  input: "report_uninitialized_variables/VarIsInitializedOp_192"
  input: "report_uninitialized_variables/VarIsInitializedOp_193"
  input: "report_uninitialized_variables/VarIsInitializedOp_194"
  input: "report_uninitialized_variables/VarIsInitializedOp_195"
  input: "report_uninitialized_variables/VarIsInitializedOp_196"
  input: "report_uninitialized_variables/VarIsInitializedOp_197"
  input: "report_uninitialized_variables/VarIsInitializedOp_198"
  input: "report_uninitialized_variables/VarIsInitializedOp_199"
  input: "report_uninitialized_variables/VarIsInitializedOp_200"
  input: "report_uninitialized_variables/VarIsInitializedOp_201"
  input: "report_uninitialized_variables/VarIsInitializedOp_202"
  input: "report_uninitialized_variables/VarIsInitializedOp_203"
  input: "report_uninitialized_variables/VarIsInitializedOp_204"
  input: "report_uninitialized_variables/VarIsInitializedOp_205"
  input: "report_uninitialized_variables/VarIsInitializedOp_206"
  input: "report_uninitialized_variables/VarIsInitializedOp_207"
  input: "report_uninitialized_variables/VarIsInitializedOp_208"
  input: "report_uninitialized_variables/VarIsInitializedOp_209"
  input: "report_uninitialized_variables/VarIsInitializedOp_210"
  input: "report_uninitialized_variables/VarIsInitializedOp_211"
  input: "report_uninitialized_variables/VarIsInitializedOp_212"
  input: "report_uninitialized_variables/VarIsInitializedOp_213"
  input: "report_uninitialized_variables/VarIsInitializedOp_214"
  input: "report_uninitialized_variables/VarIsInitializedOp_215"
  input: "report_uninitialized_variables/VarIsInitializedOp_216"
  input: "report_uninitialized_variables/VarIsInitializedOp_217"
  input: "report_uninitialized_variables/VarIsInitializedOp_218"
  input: "report_uninitialized_variables/VarIsInitializedOp_219"
  input: "report_uninitialized_variables/VarIsInitializedOp_220"
  input: "report_uninitialized_variables/VarIsInitializedOp_221"
  input: "report_uninitialized_variables/VarIsInitializedOp_222"
  input: "report_uninitialized_variables/VarIsInitializedOp_223"
  input: "report_uninitialized_variables/VarIsInitializedOp_224"
  input: "report_uninitialized_variables/VarIsInitializedOp_225"
  input: "report_uninitialized_variables/VarIsInitializedOp_226"
  input: "report_uninitialized_variables/VarIsInitializedOp_227"
  input: "report_uninitialized_variables/VarIsInitializedOp_228"
  input: "report_uninitialized_variables/VarIsInitializedOp_229"
  input: "report_uninitialized_variables/VarIsInitializedOp_230"
  input: "report_uninitialized_variables/VarIsInitializedOp_231"
  input: "report_uninitialized_variables/VarIsInitializedOp_232"
  input: "report_uninitialized_variables/VarIsInitializedOp_233"
  input: "report_uninitialized_variables/VarIsInitializedOp_234"
  input: "report_uninitialized_variables/VarIsInitializedOp_235"
  input: "report_uninitialized_variables/VarIsInitializedOp_236"
  input: "report_uninitialized_variables/VarIsInitializedOp_237"
  input: "report_uninitialized_variables/VarIsInitializedOp_238"
  input: "report_uninitialized_variables/VarIsInitializedOp_239"
  input: "report_uninitialized_variables/VarIsInitializedOp_240"
  input: "report_uninitialized_variables/VarIsInitializedOp_241"
  input: "report_uninitialized_variables/VarIsInitializedOp_242"
  input: "report_uninitialized_variables/VarIsInitializedOp_243"
  input: "report_uninitialized_variables/VarIsInitializedOp_244"
  input: "report_uninitialized_variables/VarIsInitializedOp_245"
  input: "report_uninitialized_variables/VarIsInitializedOp_246"
  input: "report_uninitialized_variables/VarIsInitializedOp_247"
  input: "report_uninitialized_variables/VarIsInitializedOp_248"
  input: "report_uninitialized_variables/VarIsInitializedOp_249"
  input: "report_uninitialized_variables/VarIsInitializedOp_250"
  input: "report_uninitialized_variables/VarIsInitializedOp_251"
  input: "report_uninitialized_variables/VarIsInitializedOp_252"
  input: "report_uninitialized_variables/VarIsInitializedOp_253"
  input: "report_uninitialized_variables/VarIsInitializedOp_254"
  input: "report_uninitialized_variables/VarIsInitializedOp_255"
  input: "report_uninitialized_variables/VarIsInitializedOp_256"
  input: "report_uninitialized_variables/VarIsInitializedOp_257"
  input: "report_uninitialized_variables/VarIsInitializedOp_258"
  input: "report_uninitialized_variables/VarIsInitializedOp_259"
  input: "report_uninitialized_variables/VarIsInitializedOp_260"
  input: "report_uninitialized_variables/VarIsInitializedOp_261"
  input: "report_uninitialized_variables/VarIsInitializedOp_262"
  input: "report_uninitialized_variables/VarIsInitializedOp_263"
  input: "report_uninitialized_variables/VarIsInitializedOp_264"
  input: "report_uninitialized_variables/VarIsInitializedOp_265"
  input: "report_uninitialized_variables/VarIsInitializedOp_266"
  input: "report_uninitialized_variables/VarIsInitializedOp_267"
  input: "report_uninitialized_variables/VarIsInitializedOp_268"
  input: "report_uninitialized_variables/VarIsInitializedOp_269"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 270
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^discriminator/layer_1/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_1/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_1/conv2d/bias/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_2/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_2/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_3/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_3/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_4/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_4/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Assign"
  input: "^discriminator_loss/Mean/ExponentialMovingAverage/Assign"
  input: "^discriminator_train/beta1_power/Assign"
  input: "^discriminator_train/beta2_power/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Assign"
  input: "^generator/decoder_2/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_2/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Assign"
  input: "^generator/decoder_3/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_3/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Assign"
  input: "^generator/decoder_4/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_4/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Assign"
  input: "^generator/decoder_5/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_5/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Assign"
  input: "^generator/decoder_6/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_6/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Assign"
  input: "^generator/decoder_7/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_7/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Assign"
  input: "^generator/decoder_8/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_8/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Assign"
  input: "^generator/encoder_1/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_1/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_1/conv2d/bias/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Assign"
  input: "^generator/encoder_2/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_2/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_2/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_2/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_2/conv2d/bias/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Assign"
  input: "^generator/encoder_3/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_3/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_3/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_3/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_3/conv2d/bias/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Assign"
  input: "^generator/encoder_4/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_4/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_4/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_4/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_4/conv2d/bias/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Assign"
  input: "^generator/encoder_5/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_5/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_5/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_5/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_5/conv2d/bias/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Assign"
  input: "^generator/encoder_6/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_6/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_6/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_6/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_6/conv2d/bias/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Assign"
  input: "^generator/encoder_7/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_7/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_7/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_7/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_7/conv2d/bias/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Assign"
  input: "^generator/encoder_8/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_8/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_8/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_8/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_8/conv2d/bias/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Assign"
  input: "^generator_loss/Mean/ExponentialMovingAverage/Assign"
  input: "^generator_loss/Mean_1/ExponentialMovingAverage/Assign"
  input: "^generator_train/beta1_power/Assign"
  input: "^generator_train/beta2_power/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "load_images/input_producer/fraction_of_32_full"
  input: "batch/fraction_of_32_full"
  input: "inputs_summary/inputs"
  input: "targets_summary/targets"
  input: "outputs_summary/outputs"
  input: "predict_real_summary/predict_real"
  input: "predict_fake_summary/predict_fake"
  input: "discriminator_loss_1"
  input: "generator_loss_GAN"
  input: "generator_loss_L1"
  input: "generator/encoder_1/conv2d/kernel/values"
  input: "generator/encoder_1/conv2d/bias/values"
  input: "generator/encoder_2/conv2d/kernel/values"
  input: "generator/encoder_2/conv2d/bias/values"
  input: "generator/encoder_2/batch_normalization/gamma/values"
  input: "generator/encoder_2/batch_normalization/beta/values"
  input: "generator/encoder_3/conv2d/kernel/values"
  input: "generator/encoder_3/conv2d/bias/values"
  input: "generator/encoder_3/batch_normalization/gamma/values"
  input: "generator/encoder_3/batch_normalization/beta/values"
  input: "generator/encoder_4/conv2d/kernel/values"
  input: "generator/encoder_4/conv2d/bias/values"
  input: "generator/encoder_4/batch_normalization/gamma/values"
  input: "generator/encoder_4/batch_normalization/beta/values"
  input: "generator/encoder_5/conv2d/kernel/values"
  input: "generator/encoder_5/conv2d/bias/values"
  input: "generator/encoder_5/batch_normalization/gamma/values"
  input: "generator/encoder_5/batch_normalization/beta/values"
  input: "generator/encoder_6/conv2d/kernel/values"
  input: "generator/encoder_6/conv2d/bias/values"
  input: "generator/encoder_6/batch_normalization/gamma/values"
  input: "generator/encoder_6/batch_normalization/beta/values"
  input: "generator/encoder_7/conv2d/kernel/values"
  input: "generator/encoder_7/conv2d/bias/values"
  input: "generator/encoder_7/batch_normalization/gamma/values"
  input: "generator/encoder_7/batch_normalization/beta/values"
  input: "generator/encoder_8/conv2d/kernel/values"
  input: "generator/encoder_8/conv2d/bias/values"
  input: "generator/encoder_8/batch_normalization/gamma/values"
  input: "generator/encoder_8/batch_normalization/beta/values"
  input: "generator/decoder_8/conv2d_transpose/kernel/values"
  input: "generator/decoder_8/conv2d_transpose/bias/values"
  input: "generator/decoder_8/batch_normalization/gamma/values"
  input: "generator/decoder_8/batch_normalization/beta/values"
  input: "generator/decoder_7/conv2d_transpose/kernel/values"
  input: "generator/decoder_7/conv2d_transpose/bias/values"
  input: "generator/decoder_7/batch_normalization/gamma/values"
  input: "generator/decoder_7/batch_normalization/beta/values"
  input: "generator/decoder_6/conv2d_transpose/kernel/values"
  input: "generator/decoder_6/conv2d_transpose/bias/values"
  input: "generator/decoder_6/batch_normalization/gamma/values"
  input: "generator/decoder_6/batch_normalization/beta/values"
  input: "generator/decoder_5/conv2d_transpose/kernel/values"
  input: "generator/decoder_5/conv2d_transpose/bias/values"
  input: "generator/decoder_5/batch_normalization/gamma/values"
  input: "generator/decoder_5/batch_normalization/beta/values"
  input: "generator/decoder_4/conv2d_transpose/kernel/values"
  input: "generator/decoder_4/conv2d_transpose/bias/values"
  input: "generator/decoder_4/batch_normalization/gamma/values"
  input: "generator/decoder_4/batch_normalization/beta/values"
  input: "generator/decoder_3/conv2d_transpose/kernel/values"
  input: "generator/decoder_3/conv2d_transpose/bias/values"
  input: "generator/decoder_3/batch_normalization/gamma/values"
  input: "generator/decoder_3/batch_normalization/beta/values"
  input: "generator/decoder_2/conv2d_transpose/kernel/values"
  input: "generator/decoder_2/conv2d_transpose/bias/values"
  input: "generator/decoder_2/batch_normalization/gamma/values"
  input: "generator/decoder_2/batch_normalization/beta/values"
  input: "generator/decoder_1/conv2d_transpose/kernel/values"
  input: "generator/decoder_1/conv2d_transpose/bias/values"
  input: "discriminator/layer_1/conv2d/kernel/values"
  input: "discriminator/layer_1/conv2d/bias/values"
  input: "discriminator/layer_2/conv2d/kernel/values"
  input: "discriminator/layer_2/conv2d/bias/values"
  input: "discriminator/layer_2/batch_normalization/gamma/values"
  input: "discriminator/layer_2/batch_normalization/beta/values"
  input: "discriminator/layer_3/conv2d/kernel/values"
  input: "discriminator/layer_3/conv2d/bias/values"
  input: "discriminator/layer_3/batch_normalization/gamma/values"
  input: "discriminator/layer_3/batch_normalization/beta/values"
  input: "discriminator/layer_4/conv2d/kernel/values"
  input: "discriminator/layer_4/conv2d/bias/values"
  input: "discriminator/layer_4/batch_normalization/gamma/values"
  input: "discriminator/layer_4/batch_normalization/beta/values"
  input: "discriminator/layer_5/conv2d/kernel/values"
  input: "discriminator/layer_5/conv2d/bias/values"
  input: "discriminator/layer_1/conv2d/kernel/gradients"
  input: "discriminator/layer_1/conv2d/bias/gradients"
  input: "discriminator/layer_2/conv2d/kernel/gradients"
  input: "discriminator/layer_2/conv2d/bias/gradients"
  input: "discriminator/layer_2/batch_normalization/gamma/gradients"
  input: "discriminator/layer_2/batch_normalization/beta/gradients"
  input: "discriminator/layer_3/conv2d/kernel/gradients"
  input: "discriminator/layer_3/conv2d/bias/gradients"
  input: "discriminator/layer_3/batch_normalization/gamma/gradients"
  input: "discriminator/layer_3/batch_normalization/beta/gradients"
  input: "discriminator/layer_4/conv2d/kernel/gradients"
  input: "discriminator/layer_4/conv2d/bias/gradients"
  input: "discriminator/layer_4/batch_normalization/gamma/gradients"
  input: "discriminator/layer_4/batch_normalization/beta/gradients"
  input: "discriminator/layer_5/conv2d/kernel/gradients"
  input: "discriminator/layer_5/conv2d/bias/gradients"
  input: "generator/encoder_1/conv2d/kernel/gradients"
  input: "generator/encoder_1/conv2d/bias/gradients"
  input: "generator/encoder_2/conv2d/kernel/gradients"
  input: "generator/encoder_2/conv2d/bias/gradients"
  input: "generator/encoder_2/batch_normalization/gamma/gradients"
  input: "generator/encoder_2/batch_normalization/beta/gradients"
  input: "generator/encoder_3/conv2d/kernel/gradients"
  input: "generator/encoder_3/conv2d/bias/gradients"
  input: "generator/encoder_3/batch_normalization/gamma/gradients"
  input: "generator/encoder_3/batch_normalization/beta/gradients"
  input: "generator/encoder_4/conv2d/kernel/gradients"
  input: "generator/encoder_4/conv2d/bias/gradients"
  input: "generator/encoder_4/batch_normalization/gamma/gradients"
  input: "generator/encoder_4/batch_normalization/beta/gradients"
  input: "generator/encoder_5/conv2d/kernel/gradients"
  input: "generator/encoder_5/conv2d/bias/gradients"
  input: "generator/encoder_5/batch_normalization/gamma/gradients"
  input: "generator/encoder_5/batch_normalization/beta/gradients"
  input: "generator/encoder_6/conv2d/kernel/gradients"
  input: "generator/encoder_6/conv2d/bias/gradients"
  input: "generator/encoder_6/batch_normalization/gamma/gradients"
  input: "generator/encoder_6/batch_normalization/beta/gradients"
  input: "generator/encoder_7/conv2d/kernel/gradients"
  input: "generator/encoder_7/conv2d/bias/gradients"
  input: "generator/encoder_7/batch_normalization/gamma/gradients"
  input: "generator/encoder_7/batch_normalization/beta/gradients"
  input: "generator/encoder_8/conv2d/kernel/gradients"
  input: "generator/encoder_8/conv2d/bias/gradients"
  input: "generator/encoder_8/batch_normalization/gamma/gradients"
  input: "generator/encoder_8/batch_normalization/beta/gradients"
  input: "generator/decoder_8/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_8/conv2d_transpose/bias/gradients"
  input: "generator/decoder_8/batch_normalization/gamma/gradients"
  input: "generator/decoder_8/batch_normalization/beta/gradients"
  input: "generator/decoder_7/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_7/conv2d_transpose/bias/gradients"
  input: "generator/decoder_7/batch_normalization/gamma/gradients"
  input: "generator/decoder_7/batch_normalization/beta/gradients"
  input: "generator/decoder_6/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_6/conv2d_transpose/bias/gradients"
  input: "generator/decoder_6/batch_normalization/gamma/gradients"
  input: "generator/decoder_6/batch_normalization/beta/gradients"
  input: "generator/decoder_5/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_5/conv2d_transpose/bias/gradients"
  input: "generator/decoder_5/batch_normalization/gamma/gradients"
  input: "generator/decoder_5/batch_normalization/beta/gradients"
  input: "generator/decoder_4/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_4/conv2d_transpose/bias/gradients"
  input: "generator/decoder_4/batch_normalization/gamma/gradients"
  input: "generator/decoder_4/batch_normalization/beta/gradients"
  input: "generator/decoder_3/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_3/conv2d_transpose/bias/gradients"
  input: "generator/decoder_3/batch_normalization/gamma/gradients"
  input: "generator/decoder_3/batch_normalization/beta/gradients"
  input: "generator/decoder_2/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_2/conv2d_transpose/bias/gradients"
  input: "generator/decoder_2/batch_normalization/gamma/gradients"
  input: "generator/decoder_2/batch_normalization/beta/gradients"
  input: "generator/decoder_1/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_1/conv2d_transpose/bias/gradients"
  attr {
    key: "N"
    value {
      i: 162
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
library {
  function {
    signature {
      name: "encode_images_target_pngs_while_cond_4045"
      input_arg {
        name: "encode_images_target_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_target_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "encode_images_target_pngs_while_cond_4045___redundant_placeholder0"
        type: DT_VARIANT
      }
      output_arg {
        name: "logicaland"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Less_1"
      op: "Less"
      input: "encode_images_target_pngs_while_loop_counter"
      input: "encode_images_target_pngs_while_maximum_iterations"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "Less_1:z:0"
      input: "Less:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "logicaland"
      value: "LogicalAnd:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "encode_images_output_pngs_while_cond_4094"
      input_arg {
        name: "encode_images_output_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_output_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "encode_images_output_pngs_while_cond_4094___redundant_placeholder0"
        type: DT_VARIANT
      }
      output_arg {
        name: "logicaland"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Less_1"
      op: "Less"
      input: "encode_images_output_pngs_while_loop_counter"
      input: "encode_images_output_pngs_while_maximum_iterations"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "Less_1:z:0"
      input: "Less:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "logicaland"
      value: "LogicalAnd:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "encode_images_input_pngs_while_body_3997"
      input_arg {
        name: "encode_images_input_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_input_pngs_while_maximum_iterations_0"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_input_pngs_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      output_arg {
        name: "add_1"
        type: DT_INT32
      }
      output_arg {
        name: "encode_images_input_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      output_arg {
        name: "add"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2write_tensorlistsetitem"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_input_pngs_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_encode_images_input_pngs_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_UINT8
        }
      }
    }
    node_def {
      name: "EncodePng"
      op: "EncodePng"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "compression"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "EncodePng:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_STRING
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_STRING
            }
          }
        }
      }
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_0"
      op: "AddV2"
      input: "placeholder"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_1_0"
      op: "AddV2"
      input: "encode_images_input_pngs_while_loop_counter"
      input: "add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "add"
      value: "add_0:z:0"
    }
    ret {
      key: "add_1"
      value: "add_1_0:z:0"
    }
    ret {
      key: "encode_images_input_pngs_while_maximum_iterations"
      value: "encode_images_input_pngs_while_maximum_iterations_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_encode_images_input_pngs_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_encode_images_input_pngs_tensorarrayunstack_tensorlistfromtensor_0"
    }
    ret {
      key: "tensorarrayv2write_tensorlistsetitem"
      value: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "encode_images_output_pngs_while_body_4095"
      input_arg {
        name: "encode_images_output_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_output_pngs_while_maximum_iterations_0"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_output_pngs_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      output_arg {
        name: "add_1"
        type: DT_INT32
      }
      output_arg {
        name: "encode_images_output_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      output_arg {
        name: "add"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2write_tensorlistsetitem"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_output_pngs_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_encode_images_output_pngs_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_UINT8
        }
      }
    }
    node_def {
      name: "EncodePng"
      op: "EncodePng"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "compression"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "EncodePng:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_STRING
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_STRING
            }
          }
        }
      }
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_0"
      op: "AddV2"
      input: "placeholder"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_1_0"
      op: "AddV2"
      input: "encode_images_output_pngs_while_loop_counter"
      input: "add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "add"
      value: "add_0:z:0"
    }
    ret {
      key: "add_1"
      value: "add_1_0:z:0"
    }
    ret {
      key: "encode_images_output_pngs_while_maximum_iterations"
      value: "encode_images_output_pngs_while_maximum_iterations_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_encode_images_output_pngs_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_encode_images_output_pngs_tensorarrayunstack_tensorlistfromtensor_0"
    }
    ret {
      key: "tensorarrayv2write_tensorlistsetitem"
      value: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "encode_images_target_pngs_while_body_4046"
      input_arg {
        name: "encode_images_target_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_target_pngs_while_maximum_iterations_0"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_target_pngs_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      output_arg {
        name: "add_1"
        type: DT_INT32
      }
      output_arg {
        name: "encode_images_target_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      output_arg {
        name: "add"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2write_tensorlistsetitem"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_encode_images_target_pngs_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_encode_images_target_pngs_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_UINT8
        }
      }
    }
    node_def {
      name: "EncodePng"
      op: "EncodePng"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "compression"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "EncodePng:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "element_dtype"
        value {
          type: DT_STRING
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_STRING
            }
          }
        }
      }
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_0"
      op: "AddV2"
      input: "placeholder"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_1_0"
      op: "AddV2"
      input: "encode_images_target_pngs_while_loop_counter"
      input: "add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "add"
      value: "add_0:z:0"
    }
    ret {
      key: "add_1"
      value: "add_1_0:z:0"
    }
    ret {
      key: "encode_images_target_pngs_while_maximum_iterations"
      value: "encode_images_target_pngs_while_maximum_iterations_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_encode_images_target_pngs_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_encode_images_target_pngs_tensorarrayunstack_tensorlistfromtensor_0"
    }
    ret {
      key: "tensorarrayv2write_tensorlistsetitem"
      value: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "encode_images_input_pngs_while_cond_3996"
      input_arg {
        name: "encode_images_input_pngs_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "encode_images_input_pngs_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "encode_images_input_pngs_while_cond_3996___redundant_placeholder0"
        type: DT_VARIANT
      }
      output_arg {
        name: "logicaland"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Less_1"
      op: "Less"
      input: "encode_images_input_pngs_while_loop_counter"
      input: "encode_images_input_pngs_while_maximum_iterations"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "Less_1:z:0"
      input: "Less:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "logicaland"
      value: "LogicalAnd:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 1205
  min_consumer: 12
}
